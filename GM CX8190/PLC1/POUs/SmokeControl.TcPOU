<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.6">
  <POU Name="SmokeControl" Id="{ece165da-f1ed-4d49-8ac5-2cb738a1f4d6}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM SmokeControl
VAR
	StartupDone: BOOL;
	GreenMasterSmokeControl: GreenMasterSmokeControl; 
	Parameters: REFERENCE TO GreenMasterBaseParameters;
	ParametersSC: REFERENCE TO SmokeControlParametersBase;
	ExerciseTimer: Timer;
	EN: BOOL;
	LocalTime: FB_LocalSystemTime;
	Elapsed: LINT;
	ForceExercise: BOOL;
	Exercising: BOOL;
	CurrentState: INT;
	StateTimer: TImer;
	DetectedDamperError: BOOL;
	DetectedDamperFireAlarm: BOOL;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF NOT StartupDone THEN
	Parameters REF= Main.GreenMaster.GetParameters();
	ParametersSC REF= Main.GreenMaster.GetParametersSC();
	StartupDone := TRUE;
END_IF
EN := GetComponent(Name := ComponentNames.GM_SMOKE_CONTROL).EN;
LocalTime(bEnable := TRUE);
ExerciseTimer(EN := EN);
Elapsed := ExerciseTimer.ElapsedTime();
IF EN AND LocalTime.bValid THEN
	GreenMasterSmokeControl(EN := TRUE, Parameters := Parameters, ParametersSC := ParametersSC);
	GreenMasterSmokeControl.Update(Parameters, Main.GreenMaster.GetParametersSC());
END_IF

IF GreenMasterSmokeControl.DamperError AND Parameters.Alarm.Active.B.DamperError THEN
	DetectedDamperError := TRUE;
END_IF
IF DetectedDamperError AND NOT Parameters.Alarm.Active.B.DamperError THEN
	DetectedDamperError := FALSE;
	ForceExercise := TRUE;
END_IF

IF GreenMasterSmokeControl.FireAlarm AND Parameters.Alarm.Active.A.FireLocal THEN
	DetectedDamperFireAlarm := TRUE;
END_IF
IF DetectedDamperFireAlarm AND NOT Parameters.Alarm.Active.A.FireLocal THEN
	DetectedDamperFireAlarm := FALSE;
	GreenMasterSmokeControl.ResetSmokeDetectors := TRUE;
	ForceExercise := TRUE;
END_IF
IF NOT Parameters.Alarm.Status.A.FireLocal THEN
	GreenMasterSmokeControl.ResetSmokeDetectors := FALSE;
END_IF

StateTimer();
CASE CurrentState OF
	0:
		IF EN AND LocalTime.bValid THEN
			IF ((ParametersSC.NetLink.Exercise.Interval > 0) AND (ExerciseTimer.ElapsedTime() > (ParametersSC.NetLink.Exercise.Interval * 3600 * 1000)) AND 
				(
					(WORD_TO_INT(LocalTime.systemTime.wHour) = ParametersSC.NetLink.Exercise.Hour) AND (WORD_TO_INT(LocalTime.systemTime.wMinute) = ParametersSC.NetLink.Exercise.Minute)
				)) OR ForceExercise THEN
				ForceExercise := FALSE;
				Exercising := TRUE;
				StateTimer.Restart();
				CurrentState := 1;
				Main.EventLog.LogEvent(EventTypes.Information, 'Exercising Smoke Control dampers');
			END_IF			
		END_IF
	1:
		IF StateTimer.ElapsedTime() > 10 * 1000 THEN
			GreenMasterSmokeControl.Exercise := TRUE;
			GreenMasterSmokeControl.Write();
			ExerciseTimer.Restart();
			CurrentState := 2;
		END_IF
	2:
		IF StateTimer.ElapsedTime() > 30 * 1000 THEN
			CurrentState := 3;
		END_IF
	3:
		IF (NOT GreenMasterSmokeControl.Exercising) OR (StateTimer.ElapsedTime() > 180 * 1000) THEN
			GreenMasterSmokeControl.Exercise := FALSE;
			Exercising := FALSE;
			CurrentState := 0;
		END_IF
END_CASE
]]></ST>
    </Implementation>
    <LineIds Name="SmokeControl">
      <LineId Id="156" Count="21" />
      <LineId Id="227" Count="4" />
      <LineId Id="235" Count="0" />
      <LineId Id="232" Count="1" />
      <LineId Id="236" Count="0" />
      <LineId Id="238" Count="0" />
      <LineId Id="240" Count="0" />
      <LineId Id="234" Count="0" />
      <LineId Id="178" Count="11" />
      <LineId Id="258" Count="0" />
      <LineId Id="190" Count="19" />
      <LineId Id="108" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>