<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.6">
  <POU Name="CTH_Interface" Id="{7657d0f0-b2f9-4dd1-84cb-0210d99e1342}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK CTH_Interface
VAR_INPUT
	AIn: REFERENCE TO AnalogInputs;
	EN: BOOL;
END_VAR
VAR_OUTPUT
	ENO: BOOL;
	FirePanelActive: BOOL;
	NightCooling: bool;
END_VAR
VAR
	InitDone: BOOL;
	PreEN: bool;
	Parameters: REFERENCE TO GreenMasterBaseParameters;
	GM_XXL: REFERENCE TO GreenMasterXXL_FB;
	GT21, GT44, GT45, GT46, GT41: TemperatureInput;
	bTemp: BOOL;
	lrTemp: LREAL;
	tTemp: TIME;
	ltTemp: LTIME;
	modeTemp: FanControlTypes;
	FirstTime: BOOL;
	TimeChannelActive: BOOL;
	TimeChannelEnabled: BOOL;
	n: UINT;
	TimeChannel1: TimeChannel1CH;
	TimeChannel2: TimeChannel1CH;
	TimeChannel3: TimeChannel1CH;
	TimeChannelFallback: TimeChannel1CH;
	FirePanelCTH: FirePanelCTH;
	WatchdogTOF: TOF;
	LastWatchDog: INT;
	SetPointAdjustment: SetPointAdjustment;
	CurrentPV: LREAL;
	
	FirePanelWasActive: BOOL;	
	SavedDisabledStates: AlarmSignals;
	AlarmSignalsTrueExceptFirePanel: AlarmSignals;
	StatusP: POINTER TO ARRAY [0..SIZEOF(AlarmSignals) - 1] OF BOOL;
	AlarmCount: UINT := SIZEOF(AlarmSignals);	
END_VAR
VAR PERSISTENT
	SavedSettings: GreenMasterSettingsCTH2;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF NOT InitDone THEN
	Parameters REF= Main.GreenMaster.GetParameters();
	GM_XXL REF= Main.GreenMaster;
	InitDone := TRUE;
END_IF;
IF EN THEN
	
	FirePanelCTH(	Parameters := Parameters,
					StartSupplyFan := Parameters.IO.DIn.FirePanelSupplyStart,
					StopSupplyFan := Parameters.IO.DIn.FirePanelSupplyStop,
					SupplyDamperOpen := TRUE,
					StartExtractFan := Parameters.IO.DIn.FirePanelExtractStart,
					StopExtractFan := Parameters.IO.DIn.FirePanelExtractStop,
					ExtractDamperOpen := TRUE,
					SupplyFanAO := Parameters.IO.AOut.T_GQ1,
					ExtractFanAO := Parameters.IO.AOut.F_GQ1,
					SupplyDamper := Parameters.IO.DOut.T_QM3,
					ExtractDamper := Parameters.IO.DOut.F_QM1
	);
	
	ADS_CTH.Tags2.Status.LA02_HANDSTARTED_TF_AL := Parameters.Alarm.Status.A.FirePanelSupplyStart; 
	ADS_CTH.Tags2.Status.LA02_HANDSTOPPED_TF_AL := Parameters.Alarm.Status.A.FirePanelSupplyStop; 
	ADS_CTH.Tags2.Status.LA02_HANDSTARTED_FF_AL := Parameters.Alarm.Status.A.FirePanelExtractStart; 
	ADS_CTH.Tags2.Status.LA02_HANDSTOPPED_FF_AL := Parameters.Alarm.Status.A.FirePanelExtractStop; 
		
	FirePanelActive := FirePanelCTH.ENO;
	
	IF FirePanelActive THEN
		// Restore alarm disabled states
		SavedDisabledStates := Parameters.Alarm.Disabled;
		// Set all alarms except fire panel disabled
		StatusP := ADR(AlarmSignalsTrueExceptFirePanel);
		FOR n := 0 TO AlarmCount - 1 DO
			StatusP^[n] := TRUE;
		END_FOR
		AlarmSignalsTrueExceptFirePanel.A.FirePanelExtractStart := FALSE;
		AlarmSignalsTrueExceptFirePanel.A.FirePanelExtractStop := FALSE;
		AlarmSignalsTrueExceptFirePanel.A.FirePanelSupplyStart := FALSE;
		AlarmSignalsTrueExceptFirePanel.A.FirePanelSupplyStop := FALSE;
		Parameters.Alarm.Disabled := AlarmSignalsTrueExceptFirePanel;
		// Remember fire panel was active
		FirePanelWasActive := TRUE;
	ELSE
		// if FirePanel was active
		IF FirePanelWasActive THEN
			// Restore previous alarm disabled states
			Parameters.Alarm.Disabled := SavedDisabledStates;
			FirePanelWasActive := FALSE;
		END_IF
	END_IF
	
	TimeChannelEnabled := FALSE;
	TimeChannelActive := FALSE;
	
	TimeChannelEnabled := TimeChannelEnabled OR ADS_CTH.Tags2.Schedule1.EN;
	TimeChannelActive := TimeChannelActive OR ADS_CTH.Tags2.Schedule1.Q;
	TimeChannel1(Settings := ADS_CTH.Tags2.Schedule1);
	
	TimeChannelEnabled := TimeChannelEnabled OR ADS_CTH.Tags2.Schedule2.EN;
	TimeChannelActive := TimeChannelActive OR ADS_CTH.Tags2.Schedule2.Q;
	TimeChannel2(Settings := ADS_CTH.Tags2.Schedule2);
	
	TimeChannelEnabled := TimeChannelEnabled OR ADS_CTH.Tags2.Schedule3.EN;
	TimeChannelActive := TimeChannelActive OR ADS_CTH.Tags2.Schedule3.Q;
	TimeChannel3(Settings := ADS_CTH.Tags2.Schedule3);
	
	TimeChannelFallback(Settings := ADS_CTH.Tags2.ScheduleFallback);
	WatchdogTOF(IN := (NOT ADS_CTH.Tags2.Settings.LA02_WatchdogEnabled) OR (ADS_CTH.Tags2.Settings.LA02_Watchdog <> LastWatchDog), PT := T#5M);
	
	IF WatchdogTOF.Q THEN
		ENO := EN AND (ADS_CTH.Tags2.Settings.LA02_RemoteStart > 0) AND TimeChannelEnabled AND TimeChannelActive;
	ELSE
		ENO := EN AND (ADS_CTH.Tags2.Settings.LA02_RemoteStart > 0) AND TimeChannelFallback.Q;
	END_IF
	
	IF EN AND Parameters.System.Operation.RemoteEN THEN
		
		Globals.IO.DOut.DO16 := ADS_CTH.Tags2.Status.LA02_P2_CMD;
		
		NightCooling := ADS_CTH.Tags2.Settings.LA02_NightCooling_V;
		
		// --------------------------------------------------------------------------------
		// Transfer from CTH tags to settings
		
		IF NOT AnyEqual(ADS_CTH.Tags2.Settings, SavedSettings) THEN	
			SavedSettings := ADS_CTH.Tags2.Settings; 	
			Parameters.Alarm.Control.ResetAlarms := ADS_CTH.Tags2.Settings.LA02_ResetAlarms;
			Parameters.Regulation.Control.EN := ADS_CTH.Tags2.Settings.LA02_VentilationEN;
			Parameters.Regulation.Temperature.EN := ADS_CTH.Tags2.Settings.LA02_TemperatureControlEN;
			IF ADS_CTH.Tags2.Settings.LA02_TemperatureControlPV = 0 THEN
				Parameters.Regulation.Temperature.TemperatureControlSource := TemperatureControlSources.T_BT1;
			ELSIF ADS_CTH.Tags2.Settings.LA02_TemperatureControlPV = 1 THEN
				Parameters.Regulation.Temperature.TemperatureControlSource := TemperatureControlSources.F_BT1;
			ELSE
				Parameters.Regulation.Temperature.TemperatureControlSource := TemperatureControlSources.T_BT1;
			END_IF	
			Parameters.Regulation.Temperature.SetPointAdjustment.Curve := ADS_CTH.Tags2.Settings.LA02_SetPointOffsetCurve; 
			Parameters.Regulation.Temperature.Control.SP := ADS_CTH.Tags2.Settings.LA02_Temperature_SP;
			Parameters.Regulation.Temperature.Control.P := ADS_CTH.Tags2.Settings.LA02_TemperatureControl_P;
			Parameters.Regulation.Temperature.Control.I := ADS_CTH.Tags2.Settings.LA02_TemperatureControl_I;
			Parameters.Regulation.Temperature.Control.D := ADS_CTH.Tags2.Settings.LA02_TemperatureControl_D;
			Parameters.System.Operation.StartupHeatRecoveryTime := TIME_TO_LTIME(ADS_CTH.Tags2.Settings.LA02_StartupHeatRecoveryTime);
			Parameters.System.Operation.PostFireVentilationTime := TIME_TO_LTIME(ADS_CTH.Tags2.Settings.LA02_PostFireVentilationTime);
			Parameters.Regulation.SupplyAir.ControlMode := ADS_CTH.Tags2.Settings.LA02_SupplyFanControlMode;
			Parameters.Regulation.SupplyAir.Control.SP := ADS_CTH.Tags2.Settings.LA02_SupplyFan_SP;
			Parameters.Regulation.SupplyAir.Control.SP_HighSpeed := ADS_CTH.Tags2.Settings.LA02_SupplyFanHighSpeed_SP;
			Parameters.Regulation.SupplyAir.Control.P := ADS_CTH.Tags2.Settings.LA02_SupplyFanControl_P;
			Parameters.Regulation.SupplyAir.Control.I := ADS_CTH.Tags2.Settings.LA02_SupplyFanControl_I;
			Parameters.Regulation.ExtractAir.ControlMode := ADS_CTH.Tags2.Settings.LA02_ExtractFanControlMode;
			Parameters.Regulation.ExtractAir.Control.SP := ADS_CTH.Tags2.Settings.LA02_ExtractFan_SP;
			Parameters.Regulation.SupplyAir.Control.SP_HighSpeed := ADS_CTH.Tags2.Settings.LA02_ExtractFanHighSpeed_SP;
			Parameters.Regulation.ExtractAir.Control.P := ADS_CTH.Tags2.Settings.LA02_ExtractFanControl_P;
			Parameters.Regulation.ExtractAir.Control.I := ADS_CTH.Tags2.Settings.LA02_ExtractFanControl_I;
		END_IF
		
		// Status transfers
		ADS_CTH.Tags2.Status.LA02_CentralFire_AL := GM_XXL.DI.CentralFireAlarm;
		ADS_CTH.Tags2.Status.LA02_Fuse_AL := GM_XXL.DI.FuseAlarm;
		ADS_CTH.Tags2.Status.LA02_ServiceSupplyAir_AL := GM_XXL.DI.ServiceAlarmCentralAndSmokeExhaustAir;
		ADS_CTH.Tags2.Status.LA02_TF1_AL := GM_XXL.DI.T_GQ1_Alarm;
		ADS_CTH.Tags2.Status.LA02_FF1_AL := GM_XXL.DI.F_GQ1_Alarm;
		ADS_CTH.Tags2.Status.LA02_Fire_AL := GM_XXL.DI.FireAlarm;
		ADS_CTH.Tags2.Status.LA02_P1_V1 := GM_XXL.DI.H_GP1_Running;
		ADS_CTH.Tags2.Status.LA02_P1_AL := FALSE; //GM_XXL.DI.H_GP1_Alarm;
		ADS_CTH.Tags2.Status.LA02_P2_V1 := Globals.IO.DIn.DI22;
		ADS_CTH.Tags2.Status.LA02_P2_AL := Globals.IO.DIn.DI23;
		
		ADS_CTH.Tags2.Status.LA02_P1_CMD := Parameters.IO.DOut.H_GP1;
		ADS_CTH.Tags2.Status.LA02_P2_CMD := Parameters.System.Operation.EN;
		ADS_CTH.Tags2.Status.LA02_ST702_CMD := Parameters.IO.DOut.F_QM1;
		ADS_CTH.Tags2.Status.LA02_ST701_ST21_CMD := Parameters.IO.DOut.T_QM3;
			
		ADS_CTH.Tags2.Status.LA02_GT42_V := LREAL_TO_REAL(GM_XXL.AI.F_BT1);
		ADS_CTH.Tags2.Status.LA02_GT31_V := LREAL_TO_REAL(GM_XXL.AI.T_BT2);
		ADS_CTH.Tags2.Status.LA02_GT41_V := LREAL_TO_REAL(GM_XXL.AI.T_BT3);
		ADS_CTH.Tags2.Status.LA02_GT81_V := LREAL_TO_REAL(GM_XXL.AI.H_BT1);
		ADS_CTH.Tags2.Status.LA02_GT11_V := LREAL_TO_REAL(GM_XXL.AI.T_BT1);
		ADS_CTH.Tags2.Status.LA02_GT43_V := LREAL_TO_REAL(GM_XXL.AI.F_BT2);
		
		GT21(ProcessValue := AIn.AI09, ProcessError := AIn.AI09_Error);
		ADS_CTH.Tags2.Status.LA02_GT21_V := LREAL_TO_REAL(GT21.Value);
		GT44(ProcessValue := AIn.AI10, ProcessError := AIn.AI10_Error);
		ADS_CTH.Tags2.Status.LA02_GT44_V := LREAL_TO_REAL(GT44.Value);
		GT45(ProcessValue := AIn.AI11, ProcessError := AIn.AI11_Error);
		ADS_CTH.Tags2.Status.LA02_GT45_V := LREAL_TO_REAL(GT45.Value);
		GT46(ProcessValue := AIn.AI12, ProcessError := AIn.AI12_Error);
		ADS_CTH.Tags2.Status.LA02_GT46_V := LREAL_TO_REAL(GT46.Value);
		GT41(ProcessValue := AIn.AI13, ProcessError := AIn.AI13_Error);
		ADS_CTH.Tags2.Status.LA02_GT41_V := LREAL_TO_REAL(GT41.Value);
		
		IF NOT GM_XXL.AI2.T_BF1_Error THEN
			ADS_CTH.Tags2.Status.LA02_GF31_V := LREAL_TO_REAL((SQRT(GM_XXL.AI2.T_BF1) * Parameters.Regulation.SupplyAir.KFactor) / 3.6);
		ELSE	
			ADS_CTH.Tags2.Status.LA02_GF31_V := 0;
		END_IF
		IF NOT GM_XXL.AI2.F_BF1_Error THEN
			ADS_CTH.Tags2.Status.LA02_GF41_V := LREAL_TO_REAL((SQRT(GM_XXL.AI2.F_BF1) * Parameters.Regulation.ExtractAir.KFactor) / 3.6);
		ELSE	
			ADS_CTH.Tags2.Status.LA02_GF41_V := 0;
		END_IF
		ADS_CTH.Tags2.Status.LA02_GP11_V := LREAL_TO_REAL(GM_XXL.AI2.T_BP1);
		ADS_CTH.Tags2.Status.LA02_GP12_V := LREAL_TO_REAL(GM_XXL.AI2.F_BP1);
		ADS_CTH.Tags2.Status.LA02_GP81_V := LREAL_TO_REAL(GM_XXL.AI2.T_BP2);
		ADS_CTH.Tags2.Status.LA02_GP82_V := LREAL_TO_REAL(GM_XXL.AI2.F_BP2);
		ADS_CTH.Tags2.Status.LA02_GP83_V := LREAL_TO_REAL(GM_XXL.AI2.F_BP3);
		
		ADS_CTH.Tags2.Status.LA02_SV31_CMD := LREAL_TO_REAL(Parameters.IO.AOut.F_QN1 * 100);
		ADS_CTH.Tags2.Status.LA02_SV21_CMD := LREAL_TO_REAL(Parameters.IO.AOut.H_QN1 * 100);
		ADS_CTH.Tags2.Status.LA02_TF1_CMD := LREAL_TO_REAL(Parameters.IO.AOut.T_GQ1 * 100);
		ADS_CTH.Tags2.Status.LA02_FF1_CMD := LREAL_TO_REAL(Parameters.IO.AOut.F_GQ1 * 100);
		
		lrTemp := ADS_CTH.Tags2.Status.LA02_GT42_V - ADS_CTH.Tags2.Status.LA02_GT31_V;
		IF lrTemp <> 0 THEN
			ADS_CTH.Tags2.Status.LA02_Eff_V := LREAL_TO_REAL((ADS_CTH.Tags2.Status.LA02_GT41_V - ADS_CTH.Tags2.Status.LA02_GT31_V) / lrTemp);
		ELSE
			ADS_CTH.Tags2.Status.LA02_Eff_V := 0;	
		END_IF
		
		Main.GreenMasterAO.SetOverrideT_GQ1(Parameters := Parameters, Override := ADS_CTH.Tags2.Settings.LA02_TF1_M, OverrideValue := ADS_CTH.Tags2.Settings.LA02_TF1_MCMD / 100.0); 
		Main.GreenMasterAO.SetOverrideF_GQ1(Parameters := Parameters, Override := ADS_CTH.Tags2.Settings.LA02_FF1_M, OverrideValue := ADS_CTH.Tags2.Settings.LA02_FF1_MCMD / 100.0);
		Main.GreenMasterAO.SetOverrideH_QN1(Parameters := Parameters, Override := ADS_CTH.Tags2.Settings.LA02_SV21_M, OverrideValue := ADS_CTH.Tags2.Settings.LA02_SV21_MCMD / 100.0);
		Main.GreenMasterAO.SetOverrideF_QN1(Parameters := Parameters, Override := ADS_CTH.Tags2.Settings.LA02_SV31_M, OverrideValue := ADS_CTH.Tags2.Settings.LA02_SV31_MCMD / 100.0);
		PreEN := TRUE;
	ELSE
		IF PreEN THEN
			Globals.IO.DOut.DO16 := FALSE;
		END_IF
		PreEN := FALSE;
	END_IF
END_IF
]]></ST>
    </Implementation>
    <LineIds Name="CTH_Interface">
      <LineId Id="1322" Count="5" />
      <LineId Id="1696" Count="0" />
      <LineId Id="1328" Count="18" />
      <LineId Id="1519" Count="23" />
      <LineId Id="1347" Count="33" />
      <LineId Id="1585" Count="0" />
      <LineId Id="1641" Count="0" />
      <LineId Id="1381" Count="2" />
      <LineId Id="1645" Count="6" />
      <LineId Id="1391" Count="4" />
      <LineId Id="1743" Count="2" />
      <LineId Id="1399" Count="8" />
      <LineId Id="1589" Count="0" />
      <LineId Id="1597" Count="0" />
      <LineId Id="1409" Count="73" />
      <LineId Id="9" Count="0" />
      <LineId Id="1698" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>