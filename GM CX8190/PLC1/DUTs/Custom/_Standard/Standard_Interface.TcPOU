<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.6">
  <POU Name="Standard_Interface" Id="{40c37495-96b9-4b64-a0d7-3e6c97a16c6a}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK Standard_Interface
VAR_INPUT
	AIn: REFERENCE TO AnalogInputs;
	EN: BOOL;
END_VAR
VAR_OUTPUT
	ENO: BOOL;
	NightCooling: BOOL;
END_VAR
VAR
	InitDone: BOOL;
	PreEN: bool;
	Parameters: REFERENCE TO GreenMasterBaseParameters;
	ParametersSC: REFERENCE TO SmokeControlParametersBase;
	GM_XXL: REFERENCE TO GreenMasterXXL_FB;
	T_BT1, T_BT2, T_BT3, H_BT1, F_BT2: TemperatureInput;
	bTemp: BOOL;
	rTemp: REAL;
	lrTemp: LREAL;
	tTemp: TIME;
	ltTemp: LTIME;
	modeTemp: FanControlTypes;
	FirstTime: BOOL;
	TimeChannelActive: BOOL;
	TimeChannelEnabled: BOOL;
	n: UINT;
	TimeChannel1: TimeChannel1CH;
	TimeChannel2: TimeChannel1CH;
	TimeChannel3: TimeChannel1CH;
	TimeChannelFallback: TimeChannel1CH;
	WatchdogTOF: TOF;
	LastWatchDog: INT;
	SetPointAdjustment: SetPointAdjustment;
	CurrentPV: LREAL;
	
	SavedDisabledStates: AlarmSignals;
	AlarmSignalsTrueExceptFirePanel: AlarmSignals;
	StatusP: POINTER TO ARRAY [0..SIZEOF(AlarmSignals) - 1] OF BOOL;
	AlarmCount: UINT := SIZEOF(AlarmSignals);
	ResetAlarmTON: TON;
	SavedParameters: GreenMasterBaseParameters;
	SavedInterface: GreenMasterSettings;
	SavedParametersSC: SmokeControlParametersBase;
	TestExchange: BOOL := FALSE;
	UpdateTON: TON;
	StartupTransferToADS: BOOL;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF NOT InitDone THEN
	Parameters REF= Main.GreenMaster.GetParameters();
	ParametersSC REF= Main.GreenMaster.GetParametersSC();
	GM_XXL REF= Main.GreenMaster;
	SavedParameters := Parameters;
	SavedInterface := ADS_Standard.Tags.Settings;
	SavedParametersSC := ParametersSC;
	StartupTransferToADS := TRUE;
	InitDone := TRUE;
ELSE
	StartupTransferToADS := FALSE;
END_IF;

TimeChannelEnabled := FALSE;
TimeChannelActive := FALSE;
(*
TimeChannelEnabled := TimeChannelEnabled OR ADS_Standard.Tags.Schedule1.EN;
TimeChannelActive := TimeChannelActive OR ADS_Standard.Tags.Schedule1.Q;
TimeChannel1(Settings := ADS_Standard.Tags.Schedule1);

TimeChannelEnabled := TimeChannelEnabled OR ADS_Standard.Tags.Schedule2.EN;
TimeChannelActive := TimeChannelActive OR ADS_Standard.Tags.Schedule2.Q;
TimeChannel2(Settings := ADS_Standard.Tags.Schedule2);

TimeChannelEnabled := TimeChannelEnabled OR ADS_Standard.Tags.Schedule3.EN;
TimeChannelActive := TimeChannelActive OR ADS_Standard.Tags.Schedule3.Q;
TimeChannel3(Settings := ADS_Standard.Tags.Schedule3);

TimeChannelFallback(Settings := ADS_Standard.Tags.ScheduleFallback);
*)
WatchdogTOF(IN := (NOT ADS_Standard.Tags.Settings.WatchdogEnabled) OR (ADS_Standard.Tags.Settings.Watchdog <> LastWatchDog), PT := T#5M);

IF WatchdogTOF.Q THEN
	ENO := EN AND (ADS_Standard.Tags.Settings.RemStart > 0) AND TimeChannelEnabled AND TimeChannelActive;
ELSE
	ENO := EN AND (ADS_Standard.Tags.Settings.RemStart > 0) AND TimeChannelFallback.Q;
END_IF

IF EN THEN
	
	UpdateTON(IN := TRUE, PT := T#1S);
	// --------------------------------------------------------------------------------
	// Transfer from Standard tags to settings
	IF (Parameters.System.Operation.RemoteEN AND UpdateTON.Q) OR StartupTransferToADS THEN
		UpdateTON(IN := False);
		ExchangeData(	ADR(Parameters.Alarm.Control.ResetAlarms), 
						ADR(ADS_Standard.Tags.Settings.ResetAlarms), 
						SIZEOF(Parameters.Alarm.Control.ResetAlarms), 
						ADR(SavedParameters.Alarm.Control.ResetAlarms), 
						ADR(SavedInterface.ResetAlarms), 
						'BOOL', 'Parameters.Alarm.Control.ResetAlarms', 'ResetAlarms');	
		ResetAlarmTON(IN := ADS_Standard.Tags.Settings.ResetAlarms, PT := T#3S);
		IF ResetAlarmTON.Q THEN
			ADS_Standard.Tags.Settings.ResetAlarms := FALSE;
		END_IF
		ExchangeData(	ADR(Parameters.Regulation.Control.EN), 
						ADR(ADS_Standard.Tags.Settings.VentilationEN), 
						SIZEOF(Parameters.Regulation.Control.EN), 
						ADR(SavedParameters.Regulation.Control.EN), 
						ADR(SavedInterface.VentilationEN), 
						'BOOL', ('Parameters.Regulation.Control.EN'), ('VentilationEN'));	
		ExchangeData(	ADR(Parameters.Regulation.Temperature.EN), 
						ADR(ADS_Standard.Tags.Settings.TemperatureControlEN), 
						SIZEOF(Parameters.Regulation.Temperature.EN), 
						ADR(SavedParameters.Regulation.Temperature.EN), 
						ADR(SavedInterface.TemperatureControlEN), 
						'BOOL', ('Parameters.Regulation.Temperature.EN'), ('ADS TemperatureControlEN'));	
		ExchangeData(	ADR(Parameters.Regulation.Temperature.TemperatureControlSource), 
						ADR(ADS_Standard.Tags.Settings.TemperatureControlPV), 
						SIZEOF(Parameters.Regulation.Temperature.TemperatureControlSource), 
						ADR(SavedParameters.Regulation.Temperature.TemperatureControlSource), 
						ADR(SavedInterface.TemperatureControlPV), 
						'INT', ('Parameters.Regulation.Temperature.TemperatureControlSource'), ('ADS TemperatureControlPV'));	
		
		ExchangeData(	ADR(Parameters.Regulation.Temperature.Control.SP), 
						ADR(ADS_Standard.Tags.Settings.Temperature_SP), 
						SIZEOF(Parameters.Regulation.Temperature.Control.SP), 
						ADR(SavedParameters.Regulation.Temperature.Control.SP), 
						ADR(SavedInterface.Temperature_SP), 
						'LREAL', ('Parameters.Regulation.Temperature.Control.SP'), ('Temperature_SP'));	
		ExchangeData(	ADR(Parameters.Regulation.Temperature.SetPointAdjustment.Curve), 
						ADR(ADS_Standard.Tags.Settings.T_BT1_CURVE), 
						SIZEOF(Parameters.Regulation.Temperature.SetPointAdjustment.Curve), 
						ADR(SavedParameters.Regulation.Temperature.SetPointAdjustment.Curve), 
						ADR(SavedInterface.T_BT1_CURVE), 
						'SetPointOffsetCurve', ('Parameters.Regulation.Temperature.SetPointAdjustment.Curve'), ('SetPointOffsetCurve'));	
		ExchangeData(	ADR(Parameters.Alarm.Delay.B.HeatExchangerEfficiency), 
						ADR(ADS_Standard.Tags.Settings.TX1_EFF_AD), 
						SIZEOF(Parameters.Alarm.Delay.B.HeatExchangerEfficiency), 
						ADR(SavedParameters.Alarm.Delay.B.HeatExchangerEfficiency), 
						ADR(SavedInterface.TX1_EFF_AD), 
						'TIME', ('Parameters.Alarm.Delay.B.HeatExchangerEfficiency'), ('HeatExchangerEfficiencyAlarmDelay'));	
		ExchangeData(	ADR(Parameters.Alarm.Limits.B.HeatExchangerEfficiency), 
						ADR(ADS_Standard.Tags.Settings.TX1_EFF_ALL), 
						SIZEOF(Parameters.Alarm.Limits.B.HeatExchangerEfficiency), 
						ADR(SavedParameters.Alarm.Limits.B.HeatExchangerEfficiency), 
						ADR(SavedInterface.TX1_EFF_ALL), 
						'REAL', ('Parameters.Alarm.Limits.B.HeatExchangerEfficiency'), ('HeatExchangerEfficiencyAlarmLimit'));	
		
		ExchangeData_LREAL_REAL(	ADR(Parameters.Regulation.Temperature.Control.P), 
						ADR(ADS_Standard.Tags.Settings.TemperatureControl_P), 
						ADR(SavedParameters.Regulation.Temperature.Control.P), 
						ADR(SavedInterface.TemperatureControl_P), 
						('Parameters.Regulation.Temperature.Control.P'), ('TemperatureControl_P'));	

		ExchangeData_LREAL_REAL(	ADR(Parameters.Regulation.Temperature.Control.I), 
						ADR(ADS_Standard.Tags.Settings.TemperatureControl_I), 
						ADR(SavedParameters.Regulation.Temperature.Control.I), 
						ADR(SavedInterface.TemperatureControl_I), 
						('Parameters.Regulation.Temperature.Control.I'), ('TemperatureControl_I'));	


		ExchangeData_LREAL_REAL(	ADR(Parameters.Regulation.Temperature.Control.D), 
						ADR(ADS_Standard.Tags.Settings.TemperatureControl_D), 
						ADR(SavedParameters.Regulation.Temperature.Control.D), 
						ADR(SavedInterface.TemperatureControl_D), 
						('Parameters.Regulation.Temperature.Control.D'), ('TemperatureControl_D'));	

		ExchangeData(ADR(Parameters.System.Operation.StartupHeatRecoveryTime), 
						ADR(ADS_Standard.Tags.Settings.StartupHeatRecoveryTime), 
						SIZEOF(Parameters.System.Operation.StartupHeatRecoveryTime), 
						ADR(SavedParameters.System.Operation.StartupHeatRecoveryTime), 
						ADR(SavedInterface.StartupHeatRecoveryTime), 
						'TIME', ('Parameters.System.Operation.StartupHeatRecoveryTime'), ('StartupHeatRecoveryTime')
		);
		
		ExchangeData(ADR(Parameters.System.Operation.PostVentilationTime), 
						ADR(ADS_Standard.Tags.Settings.FanStopDelayTime), 
						SIZEOF(Parameters.System.Operation.PostVentilationTime), 
						ADR(SavedParameters.System.Operation.PostVentilationTime), 
						ADR(SavedInterface.FanStopDelayTime), 
						'TIME', ('Parameters.System.Operation.PostVentilationTime'), ('FanStopDelayTime')
		);	
		
		UpdateTimeChannels(	TimeChannels := Parameters.System.Operation.TimeChannels, 
							SavedTimeChannels := SavedParameters.System.Operation.TimeChannels, 
							TC := ADS_Standard.Tags.Settings.TC, 
							SavedTC := SavedInterface.TC,
							'Parameters.System.Operation.TimeChannels.',
							'TC.');
		UpdateTimeChannels(	TimeChannels := Parameters.System.Operation.TimeChannelsLocal, 
							SavedTimeChannels := SavedParameters.System.Operation.TimeChannelsLocal, 
							TC := ADS_Standard.Tags.Settings.TC_LOCAL, 
							SavedTC := SavedInterface.TC_LOCAL,
							'Parameters.System.Operation.TimeChannelsLocal.',
							'TC_LOCAL.');
		ExchangeData(	ADR(Parameters.System.Operation.TimeChannels.TC0_HighSpeed), 
						ADR(ADS_Standard.Tags.Settings.TC0_ACTIVATE_HIGHSPEED_SP), 
						SIZEOF(Parameters.System.Operation.TimeChannels.TC0_HighSpeed), 
						ADR(SavedParameters.System.Operation.TimeChannels.TC0_HighSpeed), 
						ADR(SavedInterface.TC0_ACTIVATE_HIGHSPEED_SP), 
						'BOOL', ('Parameters.System.Operation.TimeChannels.TC0_HighSpeed'), ('TC0_ACTIVATE_HIGHSPEED_SP'));	
		ExchangeData(	ADR(Parameters.System.Operation.TimeChannels.TC1_HighSpeed), 
						ADR(ADS_Standard.Tags.Settings.TC1_ACTIVATE_HIGHSPEED_SP), 
						SIZEOF(Parameters.System.Operation.TimeChannels.TC1_HighSpeed), 
						ADR(SavedParameters.System.Operation.TimeChannels.TC1_HighSpeed), 
						ADR(SavedInterface.TC1_ACTIVATE_HIGHSPEED_SP), 
						'BOOL', ('Parameters.System.Operation.TimeChannels.TC1_HighSpeed'), ('TC1_ACTIVATE_HIGHSPEED_SP'));	
		ExchangeData(	ADR(Parameters.System.Operation.TimeChannels.TC2_HighSpeed), 
						ADR(ADS_Standard.Tags.Settings.TC2_ACTIVATE_HIGHSPEED_SP), 
						SIZEOF(Parameters.System.Operation.TimeChannels.TC2_HighSpeed), 
						ADR(SavedParameters.System.Operation.TimeChannels.TC2_HighSpeed), 
						ADR(SavedInterface.TC2_ACTIVATE_HIGHSPEED_SP), 
						'BOOL', ('Parameters.System.Operation.TimeChannels.TC2_HighSpeed'), ('TC2_ACTIVATE_HIGHSPEED_SP'));	
							
		ExchangeData(	ADR(Parameters.Regulation.SupplyAir.ControlMode), 
						ADR(ADS_Standard.Tags.Settings.SupplyFanControlMode), 
						SIZEOF(Parameters.Regulation.SupplyAir.ControlMode), 
						ADR(SavedParameters.Regulation.Temperature.TemperatureControlSource), 
						ADR(SavedInterface.SupplyFanControlMode), 
						'INT', ('Parameters.Regulation.SupplyAir.ControlMode'), ('SupplyFanControlMode'));	
		
		ExchangeData_LREAL_REAL(	ADR(Parameters.Regulation.SupplyAir.Control.SP), 
						ADR(ADS_Standard.Tags.Settings.SupplyFan_SP), 
						ADR(SavedParameters.Regulation.SupplyAir.Control.SP), 
						ADR(SavedInterface.SupplyFan_SP), 
						('Parameters.Regulation.SupplyAir.Control.SP'), ('SupplyFan_SP'));	
		
		ExchangeData_LREAL_REAL(	ADR(Parameters.Regulation.SupplyAir.Control.SP_HighSpeed), 
						ADR(ADS_Standard.Tags.Settings.SupplyFanHighSpeed_SP), 
						ADR(SavedParameters.Regulation.SupplyAir.Control.SP_HighSpeed), 
						ADR(SavedInterface.SupplyFanHighSpeed_SP), 
						('Parameters.Regulation.SupplyAir.Control.SP_HighSpeed'), ('SupplyFanHighSpeed_SP'));	
		
		ExchangeData_LREAL_REAL(	ADR(Parameters.Regulation.SupplyAir.Control.P), 
						ADR(ADS_Standard.Tags.Settings.SupplyFanControl_P), 
						ADR(SavedParameters.Regulation.SupplyAir.Control.P), 
						ADR(SavedInterface.SupplyFanControl_P), 
						('Parameters.Regulation.SupplyAir.Control.P'), ('SupplyFanControl_P'));	
		
		ExchangeData_LREAL_REAL(	ADR(Parameters.Regulation.SupplyAir.Control.I), 
						ADR(ADS_Standard.Tags.Settings.SupplyFanControl_I), 
						ADR(SavedParameters.Regulation.SupplyAir.Control.I), 
						ADR(SavedInterface.SupplyFanControl_I), 
						('Parameters.Regulation.SupplyAir.Control.I'), ('SupplyFanControl_I'));	
		
		ExchangeData(	ADR(Parameters.Regulation.SupplyAir.SetPointAdjustment.Curve), 
						ADR(ADS_Standard.Tags.Settings.T_GQ1_CURVE), 
						SIZEOF(Parameters.Regulation.SupplyAir.SetPointAdjustment.Curve), 
						ADR(SavedParameters.Regulation.SupplyAir.SetPointAdjustment.Curve), 
						ADR(SavedInterface.T_GQ1_CURVE), 
						'SetPointOffsetCurve', ('Parameters.Regulation.SupplyAir.SetPointAdjustment.Curve'), ('T_GQ1_CURVE'));	
		
		ExchangeData(	ADR(Parameters.Regulation.ExtractAir.ControlMode), 
						ADR(ADS_Standard.Tags.Settings.ExtractFanControlMode), 
						SIZEOF(Parameters.Regulation.ExtractAir.ControlMode), 
						ADR(SavedParameters.Regulation.Temperature.TemperatureControlSource), 
						ADR(SavedInterface.ExtractFanControlMode), 
						'INT', ('Parameters.Regulation.ExtractAir.ControlMode'), ('ExtractFanControlMode'));	
		
		ExchangeData_LREAL_REAL(	ADR(Parameters.Regulation.ExtractAir.Control.SP), 
						ADR(ADS_Standard.Tags.Settings.ExtractFan_SP), 
						ADR(SavedParameters.Regulation.ExtractAir.Control.SP), 
						ADR(SavedInterface.ExtractFan_SP), 
						('Parameters.Regulation.ExtractAir.Control.SP'), ('ExtractFan_SP'));	
		
		ExchangeData_LREAL_REAL(	ADR(Parameters.Regulation.ExtractAir.Control.SP_HighSpeed), 
						ADR(ADS_Standard.Tags.Settings.ExtractFanHighSpeed_SP), 
						ADR(SavedParameters.Regulation.ExtractAir.Control.SP_HighSpeed), 
						ADR(SavedInterface.ExtractFanHighSpeed_SP), 
						('Parameters.Regulation.ExtractAir.Control.SP_HighSpeed'), ('ExtractFanHighSpeed_SP'));	
		
		ExchangeData_LREAL_REAL(	ADR(Parameters.Regulation.ExtractAir.Control.P), 
						ADR(ADS_Standard.Tags.Settings.ExtractFanControl_P), 
						ADR(SavedParameters.Regulation.ExtractAir.Control.P), 
						ADR(SavedInterface.ExtractFanControl_P), 
						('Parameters.Regulation.ExtractAir.Control.P'), ('ExtractFanControl_P'));	
		
		ExchangeData_LREAL_REAL(	ADR(Parameters.Regulation.ExtractAir.Control.I), 
						ADR(ADS_Standard.Tags.Settings.ExtractFanControl_I), 
						ADR(SavedParameters.Regulation.ExtractAir.Control.I), 
						ADR(SavedInterface.ExtractFanControl_I), 
						('Parameters.Regulation.ExtractAir.Control.I'), ('ExtractFanControl_I'));	
		
		ExchangeData(	ADR(Parameters.Regulation.ExtractAir.SetPointAdjustment.Curve), 
						ADR(ADS_Standard.Tags.Settings.F_GQ1_CURVE), 
						SIZEOF(Parameters.Regulation.ExtractAir.SetPointAdjustment.Curve), 
						ADR(SavedParameters.Regulation.ExtractAir.SetPointAdjustment.Curve), 
						ADR(SavedInterface.F_GQ1_CURVE), 
						'SetPointOffsetCurve', ('Parameters.Regulation.ExtractAir.SetPointAdjustment.Curve'), ('F_GQ1_CURVE'));	
		
		ExchangeData(	ADR(Parameters.Regulation.NightCooling), 
						ADR(ADS_Standard.Tags.Settings.NightCooling_V), 
						SIZEOF(Parameters.Regulation.NightCooling), 
						ADR(SavedParameters.Regulation.NightCooling), 
						ADR(SavedInterface.NightCooling_V), 
						'BOOL', ('Parameters.Regulation.Temperature.NightCooling'), ('NightCooling_V'));	

		// TBD ExchangeData !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
		
		ExchangeData(	ADR(Parameters.Alarm.Delay.B.RegulationDeviation), 
						ADR(ADS_Standard.Tags.Settings.T_BT1_AD), 
						SIZEOF(Parameters.Alarm.Delay.B.RegulationDeviation), 
						ADR(SavedParameters.Alarm.Delay.B.RegulationDeviation), 
						ADR(SavedInterface.T_BT1_AD), 
						'TIME', ('Parameters.Alarm.Delay.B.RegulationDeviation'), ('T_BT1_AD'));	
		// ADS_Standard.Tags.Settings.T_BT1_AD := Parameters.Alarm.Delay.B.RegulationDeviation;
		
		ExchangeData(	ADR(Parameters.Alarm.Limits.B.RegulationDeviation), 
						ADR(ADS_Standard.Tags.Settings.T_BT1_ADL), 
						SIZEOF(Parameters.Alarm.Limits.B.RegulationDeviation), 
						ADR(SavedParameters.Alarm.Limits.B.RegulationDeviation), 
						ADR(SavedInterface.T_BT1_ADL), 
						'REAL', ('Parameters.Alarm.Limits.B.RegulationDeviation'), ('T_BT1_ADL'));	
		// ADS_Standard.Tags.Settings.T_BT1_ALL := Parameters.Alarm.Limits.B.RegulationDeviation;
		
		ExchangeData(	ADR(Parameters.Alarm.Delay.B.SupplyFan), 
						ADR(ADS_Standard.Tags.Settings.T_GQ1_AD), 
						SIZEOF(Parameters.Alarm.Delay.B.SupplyFan), 
						ADR(SavedParameters.Alarm.Delay.B.SupplyFan), 
						ADR(SavedInterface.T_GQ1_AD), 
						'TIME', ('Parameters.Alarm.Delay.B.SupplyFan'), ('T_GQ1_AD'));	
		// ADS_Standard.Tags.Settings.T_GQ1_AD := Parameters.Alarm.Delay.B.SupplyFan;
		
		ExchangeData(	ADR(Parameters.Alarm.Delay.B.ExtractFan), 
						ADR(ADS_Standard.Tags.Settings.F_GQ1_AD), 
						SIZEOF(Parameters.Alarm.Delay.B.ExtractFan), 
						ADR(SavedParameters.Alarm.Delay.B.ExtractFan), 
						ADR(SavedInterface.F_GQ1_AD), 
						'TIME', ('Parameters.Alarm.Delay.B.ExtractFan'), ('F_GQ1_AD'));	
		// ADS_Standard.Tags.Settings.F_GQ1_AD := Parameters.Alarm.Delay.B.ExtractFan;
		
		ExchangeData(	ADR(Parameters.Alarm.Delay.B.SupplyFilter), 
						ADR(ADS_Standard.Tags.Settings.T_BP2_AD), 
						SIZEOF(Parameters.Alarm.Delay.B.SupplyFilter), 
						ADR(SavedParameters.Alarm.Delay.B.SupplyFilter), 
						ADR(SavedInterface.T_BP2_AD), 
						'TIME', ('Parameters.Alarm.Delay.B.SupplyFilter'), ('T_BP2_AD'));	
		// ADS_Standard.Tags.Settings.T_BP2_AD := Parameters.Alarm.Delay.B.SupplyFilter;
		
		ExchangeData(	ADR(Parameters.Alarm.Limits.B.SupplyFilter), 
						ADR(ADS_Standard.Tags.Settings.T_BP2_AHL), 
						SIZEOF(Parameters.Alarm.Limits.B.SupplyFilter), 
						ADR(SavedParameters.Alarm.Limits.B.SupplyFilter), 
						ADR(SavedInterface.T_BP2_AHL), 
						'REAL', ('Parameters.Alarm.Limits.B.SupplyFilter'), ('T_BP2_AHL'));	
		// ADS_Standard.Tags.Settings.T_BP2_HLL := Parameters.Alarm.Limits.B.SupplyFilter;
		
		ExchangeData(	ADR(Parameters.Alarm.Delay.B.ExtractFilter), 
						ADR(ADS_Standard.Tags.Settings.F_BP2_AD), 
						SIZEOF(Parameters.Alarm.Delay.B.ExtractFilter), 
						ADR(SavedParameters.Alarm.Delay.B.ExtractFilter), 
						ADR(SavedInterface.F_BP2_AD), 
						'TIME', ('Parameters.Alarm.Delay.B.ExtractFilter'), ('F_BP2_AD'));	
		// ADS_Standard.Tags.Settings.F_BP2_AD := Parameters.Alarm.Delay.B.ExtractFilter;
		
		ExchangeData(	ADR(Parameters.Alarm.Limits.B.ExtractFilter), 
						ADR(ADS_Standard.Tags.Settings.F_BP2_AHL), 
						SIZEOF(Parameters.Alarm.Limits.B.ExtractFilter), 
						ADR(SavedParameters.Alarm.Limits.B.ExtractFilter), 
						ADR(SavedInterface.F_BP2_AHL), 
						'REAL', ('Parameters.Alarm.Limits.B.ExtractFilter'), ('F_BP2_AHL'));	
		// ADS_Standard.Tags.Settings.F_BP2_HLL := Parameters.Alarm.Limits.B.ExtractFilter;
		
		ExchangeData(	ADR(Parameters.System.Exercise.FireBypassDamper.Interval), 
						ADR(ADS_Standard.Tags.Settings.F_QM2_SP1), 
						SIZEOF(Parameters.System.Exercise.FireBypassDamper.Interval), 
						ADR(SavedParameters.System.Exercise.FireBypassDamper.Interval), 
						ADR(SavedInterface.F_QM2_SP1), 
						'INT', ('Parameters.System.Exercise.FireBypassDamper.Interval'), ('F_QM2_SP1'));	
		// ADS_Standard.Tags.Settings.F_QM2_XI := Parameters.System.Exercise.FireBypassDamper.Interval;
		
		ExchangeData(	ADR(Parameters.System.Exercise.FireBypassDamper.Hour), 
						ADR(ADS_Standard.Tags.Settings.F_QM2_SP2), 
						SIZEOF(Parameters.System.Exercise.FireBypassDamper.Hour), 
						ADR(SavedParameters.System.Exercise.FireBypassDamper.Hour), 
						ADR(SavedInterface.F_QM2_SP2), 
						'INT', ('Parameters.System.Exercise.FireBypassDamper.Hour'), ('F_QM2_SP2'));
	
		ExchangeData(	ADR(Parameters.System.Exercise.FireBypassDamper.Minute), 
						ADR(ADS_Standard.Tags.Settings.F_QM2_SP3), 
						SIZEOF(Parameters.System.Exercise.FireBypassDamper.Minute), 
						ADR(SavedParameters.System.Exercise.FireBypassDamper.Minute), 
						ADR(SavedInterface.F_QM2_SP3), 
						'INT', ('Parameters.System.Exercise.FireBypassDamper.Minute'), ('F_QM2_SP3'));
						
		ExchangeData(	ADR(ParametersSC.NetLink.Exercise.Interval), 
						ADR(ADS_Standard.Tags.Settings.EXT_QM_SP1), 
						SIZEOF(ParametersSC.NetLink.Exercise.Interval), 
						ADR(SavedParametersSC.NetLink.Exercise.Interval), 
						ADR(SavedInterface.EXT_QM_SP1), 
						'INT', ('ParametersSC.NetLink.Exercise.Interval'), ('EXT_QM_SP1'));	
		// ADS_Standard.Tags.Settings.EXT_QM_XI := ParametersSC.NetLink.Exercise.Interval;
		
		ExchangeData(	ADR(ParametersSC.NetLink.Exercise.Hour), 
						ADR(ADS_Standard.Tags.Settings.EXT_QM_SP2), 
						SIZEOF(ParametersSC.NetLink.Exercise.Hour), 
						ADR(SavedParametersSC.NetLink.Exercise.Hour), 
						ADR(SavedInterface.EXT_QM_SP2), 
						'INT', ('ParametersSC.NetLink.Exercise.Hour'), ('EXT_QM_SP2'));
		ExchangeData(	ADR(ParametersSC.NetLink.Exercise.Minute), 
						ADR(ADS_Standard.Tags.Settings.EXT_QM_SP3), 
						SIZEOF(ParametersSC.NetLink.Exercise.Minute), 
						ADR(SavedParametersSC.NetLink.Exercise.Minute), 
						ADR(SavedInterface.EXT_QM_SP3), 
						'INT', ('ParametersSC.NetLink.Exercise.Minute'), ('EXT_QM_SP3'));	
	
		ExchangeData(	ADR(Parameters.Alarm.Delay.B.SupplyAirDeviation), 
						ADR(ADS_Standard.Tags.Settings.T_BP1_AD), 
						SIZEOF(Parameters.Alarm.Delay.B.SupplyAirDeviation), 
						ADR(SavedParameters.Alarm.Delay.B.SupplyAirDeviation), 
						ADR(SavedInterface.T_BP1_AD), 
						'TIME', ('Parameters.Alarm.Delay.B.SupplyAirDeviation'), ('T_BP1_AD'));	
		
		ExchangeData(	ADR(Parameters.Alarm.Limits.B.SupplyAirPressureDeviation), 
						ADR(ADS_Standard.Tags.Settings.T_BP1_ADL), 
						SIZEOF(Parameters.Alarm.Limits.B.SupplyAirPressureDeviation), 
						ADR(SavedParameters.Alarm.Limits.B.SupplyAirPressureDeviation), 
						ADR(SavedInterface.T_BP1_ADL), 
						'REAL', ('Parameters.Alarm.Limits.B.SupplyAirPressureDeviation'), ('T_BP1_ADL'));	
		
		ExchangeData(	ADR(Parameters.Alarm.Delay.B.ExtractAirDeviation), 
						ADR(ADS_Standard.Tags.Settings.F_BP1_AD), 
						SIZEOF(Parameters.Alarm.Delay.B.ExtractAirDeviation), 
						ADR(SavedParameters.Alarm.Delay.B.ExtractAirDeviation), 
						ADR(SavedInterface.F_BP1_AD), 
						'TIME', ('Parameters.Alarm.Delay.B.ExtractAirDeviation'), ('F_BP1_AD'));	
		
		ExchangeData(	ADR(Parameters.Alarm.Limits.B.ExtractAirPressureDeviation), 
						ADR(ADS_Standard.Tags.Settings.F_BP1_ADL), 
						SIZEOF(Parameters.Alarm.Limits.B.ExtractAirPressureDeviation), 
						ADR(SavedParameters.Alarm.Limits.B.ExtractAirPressureDeviation), 
						ADR(SavedInterface.F_BP1_ADL), 
						'REAL', ('Parameters.Alarm.Limits.B.ExtractAirPressureDeviation'), ('F_BP1_ADL'));	
						
		ExchangeData(	ADR(Parameters.Alarm.Limits.A.FreezeGuard), 
						ADR(ADS_Standard.Tags.Settings.FREEZE_ALL), 
						SIZEOF(Parameters.Alarm.Limits.A.FreezeGuard), 
						ADR(SavedParameters.Alarm.Limits.A.FreezeGuard), 
						ADR(SavedInterface.FREEZE_ALL), 
						'REAL', ('Parameters.Alarm.Limits.A.Freeze'), ('FREEZE_ALL'));							
						
		ExchangeData(	ADR(Parameters.Regulation.ExtractAir.StartupFanSpeed),
						ADR(ADS_Standard.Tags.Settings.F_STARTUP_FAN_SPEED), 
						SIZEOF(Parameters.Regulation.ExtractAir.StartupFanSpeed), 
						ADR(SavedParameters.Regulation.ExtractAir.StartupFanSpeed), 
						ADR(SavedInterface.F_STARTUP_FAN_SPEED), 
						'REAL', ('Parameters.Regulation.ExtractAir.StartupFanSpeed'), ('F_STARTUP_FAN_SPEED'));	
			
		ExchangeData(	ADR(Parameters.Regulation.SupplyAir.StartupFanSpeed),
						ADR(ADS_Standard.Tags.Settings.T_STARTUP_FAN_SPEED), 
						SIZEOF(Parameters.Regulation.SupplyAir.StartupFanSpeed), 
						ADR(SavedParameters.Regulation.SupplyAir.StartupFanSpeed), 
						ADR(SavedInterface.T_STARTUP_FAN_SPEED), 
						'REAL', ('Parameters.Regulation.SupplyAir.StartupFanSpeed'), ('T_STARTUP_FAN_SPEED'));	
			
		ExchangeData(	ADR(Parameters.System.Operation.SupplyFanStartupDelay),
						ADR(ADS_Standard.Tags.Settings.T_STARTUP_DELAY), 
						SIZEOF(Parameters.System.Operation.SupplyFanStartupDelay), 
						ADR(SavedParameters.System.Operation.SupplyFanStartupDelay), 
						ADR(SavedInterface.T_STARTUP_DELAY), 
						'REAL', ('Parameters.System.Operation.SupplyFanStartupDelay'), ('T_STARTUP_DELAY'));	

		ExchangeData_LREAL_REAL(	ADR(Parameters.Regulation.Temperature.FreezeProtectionControl.SP), 
						ADR(ADS_Standard.Tags.Settings.FreezeControlSP), 
						ADR(SavedParameters.Regulation.Temperature.FreezeProtectionControl.SP), 
						ADR(SavedInterface.FreezeControlSP), 
						('Parameters.Regulation.Temperature.FreezeProtectionControl.SP'), ('FreezeControlSP'));	
									
		ExchangeData(	ADR(Parameters.Alarm.Limits.B.HeatExchangerHighPressure),
						ADR(ADS_Standard.Tags.Settings.GP83_AHL), 
						SIZEOF(Parameters.Alarm.Limits.B.HeatExchangerHighPressure), 
						ADR(SavedParameters.Alarm.Limits.B.HeatExchangerHighPressure), 
						ADR(SavedInterface.GP83_AHL), 
						'REAL', ('Parameters.Alarm.Limits.B.HeatExchangerHighPressure'), ('GP83_AHL'));	

		IF SavedInterface.WatchdogEnabled <> ADS_Standard.Tags.Settings.WatchdogEnabled THEN
			SavedInterface.WatchdogEnabled := ADS_Standard.Tags.Settings.WatchdogEnabled;
			Parameters.Alarm.Disabled.B.Watchdog := NOT ADS_Standard.Tags.Settings.WatchdogEnabled;
			SavedParameters.Alarm.Disabled.B.Watchdog := Parameters.Alarm.Disabled.B.Watchdog;
		END_IF
		IF SavedParameters.Alarm.Disabled.B.Watchdog <> Parameters.Alarm.Disabled.B.Watchdog THEN
			SavedParameters.Alarm.Disabled.B.Watchdog := Parameters.Alarm.Disabled.B.Watchdog;
			ADS_Standard.Tags.Settings.WatchdogEnabled := NOT Parameters.Alarm.Disabled.B.Watchdog;
			SavedInterface.WatchdogEnabled := ADS_Standard.Tags.Settings.WatchdogEnabled;
		END_IF
			
		Main.GreenMasterAO.SetOverrideT_GQ1(Parameters := Parameters, Override := ADS_Standard.Tags.Settings.T_GQ1_M, OverrideValue := 32767.0 * ADS_Standard.Tags.Settings.T_GQ1_OPM / 100.0); 
		Main.GreenMasterAO.SetOverrideF_GQ1(Parameters := Parameters, Override := ADS_Standard.Tags.Settings.F_GQ1_M, OverrideValue := 32767.0 * ADS_Standard.Tags.Settings.F_GQ1_OPM / 100.0);
		Main.GreenMasterAO.SetOverrideH_QN1(Parameters := Parameters, Override := ADS_Standard.Tags.Settings.H_QN1_M, OverrideValue := 32767.0 * ADS_Standard.Tags.Settings.H_QN1_OPM / 100.0);
		Main.GreenMasterAO.SetOverrideF_QN1(Parameters := Parameters, Override := ADS_Standard.Tags.Settings.TX1_M, OverrideValue := 32767.0 * ADS_Standard.Tags.Settings.TX1_OPM / 100.0);
		Main.GreenMasterAO.SetOverrideC_QN1(Parameters := Parameters, Override := ADS_Standard.Tags.Settings.C_QN1_M, OverrideValue := 32767.0 * ADS_Standard.Tags.Settings.C_QN1_OPM / 100.0);

		ExchangeData(	ADR(Parameters.IO.DOutOverride),
						ADR(ADS_Standard.Tags.Settings.DOutOverride), 
						SIZEOF(Parameters.IO.DOutOverride), 
						ADR(SavedParameters.IO.DOutOverride), 
						ADR(SavedInterface.DOutOverride), 
						'DigitalOutputOverrideParameters', ('Parameters.IO.DOutOverride'), ('DOutOverride'));	
		Main.GreenMasterDO.SetOverrides(Parameters.IO.DOutOverride);
		
		Parameters.Alarm.Delay.A.Freeze := ADS_Standard.Tags.Settings.FREEZE_AD;
		Parameters.Alarm.Delay.B.Pump1 := ADS_Standard.Tags.Settings.P1_AD;
		Parameters.Alarm.Delay.B.Pump2 := ADS_Standard.Tags.Settings.P2_AD;
		Parameters.Alarm.Limits.A.FreezeGuard := ADS_Standard.Tags.Settings.FREEZE_ALL;
	END_IF
	
	// Status transfers
	ADS_Standard.Tags.Status.ENO := Parameters.System.Operation.ENO;
	ADS_Standard.Tags.Status.Auto := Parameters.IO.DIn.Auto;
	ADS_Standard.Tags.Status.Hand := Parameters.IO.DIn.Hand;
	ADS_Standard.Tags.Status.TX1_EFF_LAL := Parameters.Alarm.Active.B.HeatExchangerEfficiency;
	ADS_Standard.Tags.Status.SFP_PV := TO_REAL(Parameters.Regulation.SystemSpecificFanPower);
	ADS_Standard.Tags.Status.TC_V := Parameters.System.Operation.TimeChannels.Q;
	ADS_Standard.Tags.Status.F_BR1_AL := Parameters.Alarm.Active.A.FireExtract; // GM_XXL.DI.FireExtractAlarm;
	ADS_Standard.Tags.Status.DAMPER_AL := Parameters.Alarm.Active.A.SupplyDamperError; // GM_XXL.DI.FireExtractAlarm;
	ADS_Standard.Tags.Status.F_BRT2_AL := Parameters.Alarm.Active.A.FireExtractTemperature;
	ADS_Standard.Tags.Status.F_BRT3_AL := Parameters.Alarm.Active.A.FireExtractPressure;
	ADS_Standard.Tags.Status.T_BR1_AL := Parameters.Alarm.Active.A.FireSupply;
	ADS_Standard.Tags.Status.F_BR1_FAULT := Parameters.Alarm.Active.B.SmokeDetectorServiceExtract;
	ADS_Standard.Tags.Status.T_BR1_FAULT := Parameters.Alarm.Active.B.SmokeDetectorServiceSupply;
	
	ADS_Standard.Tags.Status.F_BP1_AL := Parameters.Alarm.Active.B.ExtractAirDeviation;
	ADS_Standard.Tags.Status.T_BP1_AL := Parameters.Alarm.Active.B.SupplyAirDeviation;
	ADS_Standard.Tags.Status.T_BT1_AL := Parameters.Alarm.Active.B.RegulationDeviation;
	
	ADS_Standard.Tags.Status.H_BT1_LAL := Parameters.Alarm.Active.A.FreezeGuard;
	
	ADS_Standard.Tags.Status.BT1_FAULT := Parameters.IO.AIn.BT1_Error;
	ADS_Standard.Tags.Status.BT2_FAULT := Parameters.IO.AIn.BT2_Error;
	ADS_Standard.Tags.Status.F_BF1_FAULT := Parameters.IO.AIn.F_BF1_Error;
	ADS_Standard.Tags.Status.F_BP1_FAULT := Parameters.IO.AIn.F_BP1_Error;
	ADS_Standard.Tags.Status.F_BP2_FAULT := Parameters.IO.AIn.F_BP2_Error;
	ADS_Standard.Tags.Status.F_BP3_FAULT := Parameters.IO.AIn.F_BP3_Error;
	ADS_Standard.Tags.Status.F_BT1_FAULT := Parameters.IO.AIn.F_BT1_Error;
	ADS_Standard.Tags.Status.F_BT2_FAULT := Parameters.IO.AIn.F_BT2_Error;
	ADS_Standard.Tags.Status.H_BT1_FAULT := Parameters.IO.AIn.H_BT1_Error;
	ADS_Standard.Tags.Status.T_BF1_FAULT := Parameters.IO.AIn.T_BF1_Error;
	ADS_Standard.Tags.Status.T_BP1_FAULT := Parameters.IO.AIn.T_BP1_Error;
	ADS_Standard.Tags.Status.T_BP2_FAULT := Parameters.IO.AIn.T_BP2_Error;
	ADS_Standard.Tags.Status.T_BT1_FAULT := Parameters.IO.AIn.T_BT1_Error;
	ADS_Standard.Tags.Status.T_BT2_FAULT := Parameters.IO.AIn.T_BT2_Error;
	ADS_Standard.Tags.Status.T_BT3_FAULT := Parameters.IO.AIn.T_BT3_Error;
	
	ADS_Standard.Tags.Status.Fuse_AL := Parameters.Alarm.Active.A.Fuse;
	ADS_Standard.Tags.Status.T_GQ1_AL := Parameters.Alarm.Active.B.SupplyFan;
	ADS_Standard.Tags.Status.F_GQ1_AL := Parameters.Alarm.Active.B.ExtractFan;
	ADS_Standard.Tags.Status.Fire_AL := Parameters.Alarm.Active.A.FireExtract OR
											Parameters.Alarm.Active.A.FireExtractExternal OR
											Parameters.Alarm.Active.A.FireExtractPressure OR
											Parameters.Alarm.Active.A.FireExtractTemperature OR
											Parameters.Alarm.Active.A.FireLocal OR
											Parameters.Alarm.Active.A.FireSupply;
	ADS_Standard.Tags.Status.H_GP1_V := GM_XXL.DI.H_GP1_Running;
	ADS_Standard.Tags.Status.H_GP1_AL := Parameters.Alarm.Active.B.Pump1;
	ADS_Standard.Tags.Status.C_GP1_V := Globals.IO.DIn.DI22;
	ADS_Standard.Tags.Status.C_GP1_AL := Globals.IO.DIn.DI23;
	ADS_Standard.Tags.Status.T_BP2_HAL := Parameters.Alarm.Active.B.SupplyFilter;
	ADS_Standard.Tags.Status.F_BP2_HAL := Parameters.Alarm.Active.B.ExtractFilter;
	
	ADS_Standard.Tags.Status.H_GP1_CMD := Parameters.IO.DOut.H_GP1;
	ADS_Standard.Tags.Status.C_GP1_CMD := Parameters.IO.DOut.C_GP1;
	ADS_Standard.Tags.Status.F_QM1_CMD := Parameters.IO.DOut.F_QM1;
	ADS_Standard.Tags.Status.F_QM1_V0 := Parameters.IO.DIn.F_QM1_Closed;
	ADS_Standard.Tags.Status.F_QM1_V1 := Parameters.IO.DIn.F_QM1_Open;
	ADS_Standard.Tags.Status.T_QM2_CMD := Parameters.IO.DOut.T_QM2;
	ADS_Standard.Tags.Status.T_QM2_V0 := Parameters.IO.DIn.T_QM2_Closed;
	ADS_Standard.Tags.Status.T_QM2_V1 := Parameters.IO.DIn.T_QM2_Open;
		
	ADS_Standard.Tags.Status.F_QM2_CMD := Parameters.IO.DOut.F_QM2;
	ADS_Standard.Tags.Status.F_QM2_V0 := Parameters.IO.DIn.F_QM2_Closed;
	ADS_Standard.Tags.Status.F_QM2_V1 := Parameters.IO.DIn.F_QM2_Open;
	
	ADS_Standard.Tags.Status.Temperature_CSP := LREAL_TO_REAL(Parameters.Regulation.Temperature.Control.CSP);
	ADS_Standard.Tags.Status.T_BP1_CSP := LREAL_TO_REAL(Parameters.Regulation.SupplyAir.Control.CSP);
	ADS_Standard.Tags.Status.F_BP1_CSP := LREAL_TO_REAL(Parameters.Regulation.ExtractAir.Control.CSP);
	ADS_Standard.Tags.Status.F_BT1_PV := LREAL_TO_REAL(GM_XXL.AI.F_BT1);
	ADS_Standard.Tags.Status.T_BT2_PV := LREAL_TO_REAL(GM_XXL.AI.T_BT2);
	ADS_Standard.Tags.Status.T_BT3_PV := LREAL_TO_REAL(GM_XXL.AI.T_BT3);
	ADS_Standard.Tags.Status.H_BT1_PV := LREAL_TO_REAL(GM_XXL.AI.H_BT1);
	ADS_Standard.Tags.Status.T_BT1_PV := LREAL_TO_REAL(GM_XXL.AI.T_BT1);
	ADS_Standard.Tags.Status.F_BT2_PV := LREAL_TO_REAL(GM_XXL.AI.F_BT2);
	
	IF NOT GM_XXL.AI2.T_BF1_Error THEN
		ADS_Standard.Tags.Status.T_BF1_PV := LREAL_TO_REAL(Parameters.Regulation.SupplyAir.Flow);
	ELSE	
		ADS_Standard.Tags.Status.T_BF1_PV := 0;
	END_IF
	IF NOT GM_XXL.AI2.F_BF1_Error THEN
		ADS_Standard.Tags.Status.F_BF1_PV := LREAL_TO_REAL(Parameters.Regulation.ExtractAir.Flow);
	ELSE	
		ADS_Standard.Tags.Status.F_BF1_PV := 0;
	END_IF
	ADS_Standard.Tags.Status.T_BP1_PV := LREAL_TO_REAL(GM_XXL.AI2.T_BP1);
	ADS_Standard.Tags.Status.F_BP1_PV := LREAL_TO_REAL(GM_XXL.AI2.F_BP1);
	ADS_Standard.Tags.Status.T_BP2_PV := LREAL_TO_REAL(GM_XXL.AI2.T_BP2);
	ADS_Standard.Tags.Status.F_BP2_PV := LREAL_TO_REAL(GM_XXL.AI2.F_BP2);
	ADS_Standard.Tags.Status.F_BP3_PV := LREAL_TO_REAL(GM_XXL.AI2.F_BP3);
	
	IF NOT Parameters.IO.AOutOverride.F_QN1_Override THEN
		ADS_Standard.Tags.Status.TX1_OP := LREAL_TO_REAL(Parameters.IO.AOut.F_QN1);
	ELSE	
		ADS_Standard.Tags.Status.TX1_OP := LREAL_TO_REAL(Parameters.IO.AOutOverride.F_QN1_OverrideValue);
	END_IF
	IF NOT Parameters.IO.AOutOverride.H_QN1_Override THEN
		ADS_Standard.Tags.Status.H_QN1_OP := LREAL_TO_REAL(Parameters.IO.AOut.H_QN1);
	ELSE
		ADS_Standard.Tags.Status.H_QN1_OP := LREAL_TO_REAL(Parameters.IO.AOutOverride.H_QN1_OverrideValue);		
	END_IF
	IF NOT Parameters.IO.AOutOverride.C_QN1_Override THEN
		ADS_Standard.Tags.Status.C_QN1_OP := LREAL_TO_REAL(Parameters.IO.AOut.C_QN1);
	ELSE
		ADS_Standard.Tags.Status.C_QN1_OP := LREAL_TO_REAL(Parameters.IO.AOutOverride.C_QN1_OverrideValue);		
	END_IF

	IF NOT Parameters.IO.AOutOverride.T_GQ1_Override THEN
		ADS_Standard.Tags.Status.T_GQ1_OP := LREAL_TO_REAL(Parameters.IO.AOut.T_GQ1);
	ELSE
		ADS_Standard.Tags.Status.T_GQ1_OP := LREAL_TO_REAL(Parameters.IO.AOutOverride.T_GQ1_OverrideValue);		
	END_IF
	IF NOT Parameters.IO.AOutOverride.F_GQ1_Override THEN
		ADS_Standard.Tags.Status.F_GQ1_OP := LREAL_TO_REAL(Parameters.IO.AOut.F_GQ1);
	ELSE
		ADS_Standard.Tags.Status.F_GQ1_OP := LREAL_TO_REAL(Parameters.IO.AOutOverride.F_GQ1_OverrideValue);		
	END_IF
	ADS_Standard.Tags.Status.T_GQ1_V := Parameters.IO.AOut.T_GQ1 > 0.02;
	ADS_Standard.Tags.Status.F_GQ1_V := Parameters.IO.AOut.F_GQ1 > 0.02;
	
	ADS_Standard.Tags.Status.TX1_EFF_PV := LREAL_TO_REAL(Parameters.Regulation.Temperature.Efficiency);
	ADS_Standard.Tags.Status.TX1_EFF_LAL := Parameters.Alarm.Active.B.HeatExchangerEfficiency;
	ADS_Standard.Tags.Status.PLC_VERSION_PV := GlobalSettings.PlcVersion;
	ADS_Standard.Tags.Status.TIMEANDDATE_PV := Parameters.System.SystemTime;
	ADS_Standard.Tags.Status.SYSTEM_STATE_V := Parameters.System.Operation.State;

	ADS_Standard.Tags.Status.OPTIME_AL := Parameters.Alarm.Active.B.OperatingTime;
	ADS_Standard.Tags.Status.OPTIME_PV := TO_REAL(LTIME_TO_LINT(Parameters.System.Operation.OperatingTime) / 1000000000);
	PreEN := TRUE;
	
	//ModbusSettings();.
	//ModbusStatus();
END_IF
]]></ST>
    </Implementation>
    <Method Name="ExchangeData" Id="{46e1af3f-f028-4584-9b21-580cb58e0bb4}">
      <Declaration><![CDATA[METHOD ExchangeData : BOOL
VAR_INPUT
	PData1: POINTER TO BYTE;
	PData2: POINTER TO BYTE;
	Size: UDINT;
	PSavedData1: POINTER TO BYTE;
	PSavedData2: POINTER TO BYTE;
	VarType: STRING;
	{attribute 'TcEncoding':='UTF-8'}
	LogText1: STRING := '';
	{attribute 'TcEncoding':='UTF-8'}
	LogText2: STRING := '';
END_VAR
VAR
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (MemCmp(PData1, PSavedData1, Size) <> 0) OR StartupTransferToADS THEN
	MemCpy(PData2, PData1, Size);
	MemCpy(PSavedData2, PData1, Size);
	MemCpy(PSavedData1, PData1, Size);
	IF LogText1 <> '' THEN
		Main.EventLog.LogEventJSON(EventTypes.Information, concat('Local change ', concat(concat(LogText1, ' => '), LogText2)), VarType, Size, PData1);	
	END_IF
END_IF
IF MemCmp(PData2, PSavedData2, Size) <> 0 THEN
	MemCpy(PData1, PData2, Size);
	MemCpy(PSavedData1, PData2, Size);
	MemCpy(PSavedData2, PData2, Size);
	IF LogText2 <> '' THEN
		Main.EventLog.LogEventJSON(EventTypes.Information, concat('ADS change ', concat(concat(LogText2, ' => '), LogText1)), VarType, Size, PData2);	
	END_IF
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="ExchangeData_LREAL_REAL" Id="{2e233188-bb31-4307-8a75-28c6820feef1}">
      <Declaration><![CDATA[METHOD ExchangeData_LREAL_REAL : BOOL
VAR_INPUT
	PData1: POINTER TO LREAL;
	PData2: POINTER TO REAL;
	PSavedData1: POINTER TO LREAL;
	PSavedData2: POINTER TO REAL;
	{attribute 'TcEncoding':='UTF-8'}
	LogText1: STRING := '';
	{attribute 'TcEncoding':='UTF-8'}
	LogText2: STRING := '';
END_VAR
VAR
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (PData1^ <> PSavedData1^) or StartupTransferToADS THEN
	PData2^ := TO_REAL(PData1^);
	PSavedData2^ := TO_REAL(PData1^);
	PSavedData1^ := PData1^;
	IF LogText1 <> '' THEN
		Main.EventLog.LogEventJSON(EventTypes.Information, concat('Local change ', concat(concat(LogText1, ' => '), LogText2)), 'LREAL', SIZEOF(LREAL), PData1);	
	END_IF
END_IF
IF PData2^ <> PSavedData2^ THEN
	PData1^ := TO_LREAL(PData2^);
	PSavedData1^ := TO_LREAL(PData2^);
	PSavedData2^ := PData2^;
	IF LogText2 <> '' THEN
		Main.EventLog.LogEventJSON(EventTypes.Information, concat('ADS change ', concat(concat(LogText2, ' => '), LogText1)), 'REAL', SIZEOF(REAL), PData2);	
	END_IF
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="ModbusSettings" Id="{65316f0c-b296-4acc-9143-2ee0375ea553}">
      <Declaration><![CDATA[METHOD ModbusSettings : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[GVL.mb_Output_Registers[0] := BOOL_TO_WORD(ADS_Standard.Tags.Status.TC_V);]]></ST>
      </Implementation>
    </Method>
    <Action Name="ModbusStatus" Id="{0977aaf0-06a9-4503-8531-2e133e4315a5}">
      <Implementation>
        <ST><![CDATA[GVL.mb_Input_Registers[0] := TO_WORD(TO_INT(ADS_Standard.Tags.Status.TEMPERATURE_CSP));

GVL.mb_Input_Registers[100] := TO_WORD(TO_INT(ADS_Standard.Tags.Status.BT1_PV * 10));
GVL.mb_Input_Registers[101] := TO_WORD(TO_INT(ADS_Standard.Tags.Status.T_BT2_PV * 10));
GVL.mb_Input_Registers[102] := TO_WORD(TO_INT(ADS_Standard.Tags.Status.T_BT3_PV * 10));
GVL.mb_Input_Registers[103] := TO_WORD(TO_INT(ADS_Standard.Tags.Status.H_BT1_PV * 10));
GVL.mb_Input_Registers[104] := TO_WORD(TO_INT(ADS_Standard.Tags.Status.T_BT1_PV * 10));
GVL.mb_Input_Registers[105] := TO_WORD(TO_INT(ADS_Standard.Tags.Status.F_BT1_PV * 10));
GVL.mb_Input_Registers[106] := TO_WORD(TO_INT(ADS_Standard.Tags.Status.F_BT2_PV * 10));
GVL.mb_Input_Registers[107] := TO_WORD(TO_INT(ADS_Standard.Tags.Status.BT2_PV * 10));

GVL.mb_Input_Registers[200] := TO_WORD(TO_INT(ADS_Standard.Tags.Status.T_BP1_CSP));
GVL.mb_Input_Registers[201] := TO_WORD(TO_INT(ADS_Standard.Tags.Status.F_BP1_CSP));

GVL.mb_Input_Registers[300] := TO_WORD(TO_INT(ADS_Standard.Tags.Status.T_BP1_PV));
GVL.mb_Input_Registers[301] := TO_WORD(TO_INT(ADS_Standard.Tags.Status.F_BP1_PV));

GVL.mb_Input_Registers[500] := TO_WORD(TO_INT(ADS_Standard.Tags.Status.T_BF1_PV));
GVL.mb_Input_Registers[501] := TO_WORD(TO_INT(ADS_Standard.Tags.Status.F_BF1_PV));

GVL.mb_Input_Registers[600] := TO_WORD(TO_INT(ADS_Standard.Tags.Status.TX1_EFF_PV * 100));
GVL.mb_Input_Registers[601] := TO_WORD(TO_INT(ADS_Standard.Tags.Status.SFP_PV * 1000));

GVL.mb_Input_Registers[700] := TO_WORD(ADS_Standard.Tags.Status.T_GQ1_OP * 100);
GVL.mb_Input_Registers[701] := TO_WORD(ADS_Standard.Tags.Status.F_GQ1_OP * 100);
GVL.mb_Input_Registers[702] := TO_WORD(TO_INT(ADS_Standard.Tags.Status.TX1_OP * 100));
GVL.mb_Input_Registers[703] := TO_WORD(TO_INT(ADS_Standard.Tags.Status.H_QN1_OP * 100));
GVL.mb_Input_Registers[704] := TO_WORD(TO_INT(ADS_Standard.Tags.Status.C_QN1_OP * 100));

GVL.mb_Input_Registers[800] := TO_WORD(ADS_Standard.Tags.Status.T_GQ1_OP > 0);
GVL.mb_Input_Registers[801] := TO_WORD(ADS_Standard.Tags.Status.F_GQ1_OP > 0);
GVL.mb_Input_Registers[802] := TO_WORD(ADS_Standard.Tags.Status.H_GP1_CMD);
GVL.mb_Input_Registers[803] := TO_WORD(ADS_Standard.Tags.Status.C_GP1_CMD);

GVL.mb_Input_Registers[900] := TO_WORD(ADS_Standard.Tags.Status.F_BR1_AL);
GVL.mb_Input_Registers[901] := TO_WORD(ADS_Standard.Tags.Status.T_BR1_AL);
GVL.mb_Input_Registers[902] := TO_WORD(ADS_Standard.Tags.Status.FIRE_AL);
GVL.mb_Input_Registers[903] := TO_WORD(ADS_Standard.Tags.Status.F_BRT2_AL);
GVL.mb_Input_Registers[904] := TO_WORD(ADS_Standard.Tags.Status.F_BRT3_AL);
GVL.mb_Input_Registers[905] := TO_WORD(ADS_Standard.Tags.Status.FUSE_AL);
GVL.mb_Input_Registers[906] := TO_WORD(ADS_Standard.Tags.Status.T_GQ1_AL);
GVL.mb_Input_Registers[907] := TO_WORD(ADS_Standard.Tags.Status.T_GQ_AL1);
GVL.mb_Input_Registers[908] := TO_WORD(ADS_Standard.Tags.Status.T_GQ_AL2);
GVL.mb_Input_Registers[909] := TO_WORD(ADS_Standard.Tags.Status.F_GQ1_AL);
GVL.mb_Input_Registers[910] := TO_WORD(ADS_Standard.Tags.Status.F_GQ_AL1);
GVL.mb_Input_Registers[911] := TO_WORD(ADS_Standard.Tags.Status.F_GQ_AL2);
GVL.mb_Input_Registers[912] := TO_WORD(ADS_Standard.Tags.Status.H_GP1_AL);
GVL.mb_Input_Registers[913] := TO_WORD(ADS_Standard.Tags.Status.C_GP1_AL);
GVL.mb_Input_Registers[914] := TO_WORD(ADS_Standard.Tags.Status.QM_AL);
GVL.mb_Input_Registers[915] := TO_WORD(ADS_Standard.Tags.Status.TX1_EFF_LAL);
GVL.mb_Input_Registers[916] := TO_WORD(ADS_Standard.Tags.Status.H_BT1_LAL);
GVL.mb_Input_Registers[917] := TO_WORD(ADS_Standard.Tags.Status.T_BP2_HAL);
GVL.mb_Input_Registers[918] := TO_WORD(ADS_Standard.Tags.Status.F_BP2_HAL);
GVL.mb_Input_Registers[919] := TO_WORD(ADS_Standard.Tags.Status.F_BP3_AL);
GVL.mb_Input_Registers[920] := TO_WORD(ADS_Standard.Tags.Status.T_BT3_FAULT);
GVL.mb_Input_Registers[921] := TO_WORD(ADS_Standard.Tags.Status.T_BT1_AL);
GVL.mb_Input_Registers[922] := TO_WORD(ADS_Standard.Tags.Status.T_BP1_AL);
GVL.mb_Input_Registers[923] := TO_WORD(ADS_Standard.Tags.Status.F_BP1_AL);
GVL.mb_Input_Registers[924] := TO_WORD(ADS_Standard.Tags.Status.T_BT1_FAULT);
GVL.mb_Input_Registers[925] := TO_WORD(ADS_Standard.Tags.Status.BT1_FAULT);
GVL.mb_Input_Registers[926] := TO_WORD(ADS_Standard.Tags.Status.T_BT2_FAULT);
GVL.mb_Input_Registers[927] := TO_WORD(ADS_Standard.Tags.Status.T_BT3_FAULT);
GVL.mb_Input_Registers[928] := TO_WORD(ADS_Standard.Tags.Status.F_BT1_FAULT);
GVL.mb_Input_Registers[929] := TO_WORD(ADS_Standard.Tags.Status.F_BT2_FAULT);
GVL.mb_Input_Registers[930] := TO_WORD(ADS_Standard.Tags.Status.BT2_FAULT);
GVL.mb_Input_Registers[931] := TO_WORD(ADS_Standard.Tags.Status.H_BT1_FAULT);
GVL.mb_Input_Registers[932] := TO_WORD(ADS_Standard.Tags.Status.T_BP1_FAULT);
GVL.mb_Input_Registers[933] := TO_WORD(ADS_Standard.Tags.Status.F_BP1_FAULT);
GVL.mb_Input_Registers[934] := TO_WORD(ADS_Standard.Tags.Status.T_BP2_FAULT);
GVL.mb_Input_Registers[935] := TO_WORD(ADS_Standard.Tags.Status.F_BP2_FAULT);
GVL.mb_Input_Registers[936] := TO_WORD(ADS_Standard.Tags.Status.F_BP3_FAULT);
GVL.mb_Input_Registers[937] := TO_WORD(ADS_Standard.Tags.Status.T_BR1_AL);
GVL.mb_Input_Registers[938] := TO_WORD(ADS_Standard.Tags.Status.F_BR1_AL);
GVL.mb_Input_Registers[939] := TO_WORD(ADS_Standard.Tags.Status.T_BF1_FAULT);
GVL.mb_Input_Registers[940] := TO_WORD(ADS_Standard.Tags.Status.F_BF1_FAULT);

]]></ST>
      </Implementation>
    </Action>
    <Method Name="UpdateTimeChannels" Id="{83e2846f-c73b-4371-b3f4-b9880ebd185c}">
      <Declaration><![CDATA[METHOD UpdateTimeChannels : BOOL
VAR_INPUT
	TimeChannels: REFERENCE TO TimeChannelParameters;
	SavedTimeChannels: REFERENCE TO TimeChannelParameters;
	TC: REFERENCE TO TimeChannel_CT_CF;
	SavedTC: REFERENCE TO TimeChannel_CT_CF;
	Text1: STRING;
	Text2: STRING;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[ExchangeData(	ADR(TimeChannels.TC01.OffTime), 
				ADR(TC.CF1), 
				SIZEOF(TimeChannels.TC01.OffTime), 
				ADR(SavedTimeChannels.TC01.OffTime), 
				ADR(SavedTC.CF1), 
				'UINT', concat(Text1, '.TC01.OffTime'), concat(Text2, 'CF1'));	
ExchangeData(	ADR(TimeChannels.TC02.OffTime), 
				ADR(TC.CF2), 
				SIZEOF(TimeChannels.TC02.OffTime), 
				ADR(SavedTimeChannels.TC02.OffTime), 
				ADR(SavedTC.CF2), 
				'UINT', concat(Text1, '.TC02.OffTime'), (concat(Text2, '.CF2')));	
ExchangeData(	ADR(TimeChannels.TC03.OffTime), 
				ADR(TC.CF3), 
				SIZEOF(TimeChannels.TC03.OffTime), 
				ADR(SavedTimeChannels.TC03.OffTime), 
				ADR(SavedTC.CF3), 
				'UINT', concat(Text1, '.TC03.OffTime'), (concat(Text2, '.CF3')));	
ExchangeData(	ADR(TimeChannels.TC04.OffTime), 
				ADR(TC.CF4), 
				SIZEOF(TimeChannels.TC04.OffTime), 
				ADR(SavedTimeChannels.TC04.OffTime), 
				ADR(SavedTC.CF4), 
				'UINT', concat(Text1, '.TC04.OffTime'), (concat(Text2, '.CF4')));	
ExchangeData(	ADR(TimeChannels.TC05.OffTime), 
				ADR(TC.CF5), 
				SIZEOF(TimeChannels.TC05.OffTime), 
				ADR(SavedTimeChannels.TC05.OffTime), 
				ADR(SavedTC.CF5), 
				'UINT', concat(Text1, '.TC05.OffTime'), (concat(Text2, '.CF5')));	
ExchangeData(	ADR(TimeChannels.TC06.OffTime), 
				ADR(TC.CF6), 
				SIZEOF(TimeChannels.TC06.OffTime), 
				ADR(SavedTimeChannels.TC06.OffTime), 
				ADR(SavedTC.CF6), 
				'UINT', concat(Text1, '.TC06.OffTime'), (concat(Text2, '.CF6')));	
ExchangeData(	ADR(TimeChannels.TC07.OffTime), 
				ADR(TC.CF7), 
				SIZEOF(TimeChannels.TC07.OffTime), 
				ADR(SavedTimeChannels.TC07.OffTime), 
				ADR(SavedTC.CF7), 
				'UINT', concat(Text1, '.TC07.OffTime'), (concat(Text2, '.CF7')));	

ExchangeData(	ADR(TimeChannels.TC11.OffTime), 
				ADR(TC.CF11), 
				SIZEOF(TimeChannels.TC11.OffTime), 
				ADR(SavedTimeChannels.TC11.OffTime), 
				ADR(SavedTC.CF11), 
				'UINT', concat(Text1, '.TC11.OffTime'), (concat(Text2, '.CF11')));	
ExchangeData(	ADR(TimeChannels.TC12.OffTime), 
				ADR(TC.CF12), 
				SIZEOF(TimeChannels.TC12.OffTime), 
				ADR(SavedTimeChannels.TC12.OffTime), 
				ADR(SavedTC.CF12), 
				'UINT', concat(Text1, '.TC12.OffTime'), (concat(Text2, '.CF12')));	
ExchangeData(	ADR(TimeChannels.TC13.OffTime), 
				ADR(TC.CF13), 
				SIZEOF(TimeChannels.TC13.OffTime), 
				ADR(SavedTimeChannels.TC13.OffTime), 
				ADR(SavedTC.CF13), 
				'UINT', concat(Text1, '.TC13.OffTime'), (concat(Text2, '.CF13')));	
ExchangeData(	ADR(TimeChannels.TC14.OffTime), 
				ADR(TC.CF14), 
				SIZEOF(TimeChannels.TC14.OffTime), 
				ADR(SavedTimeChannels.TC14.OffTime), 
				ADR(SavedTC.CF14), 
				'UINT', concat(Text1, '.TC14.OffTime'), (concat(Text2, '.CF14')));	
ExchangeData(	ADR(TimeChannels.TC15.OffTime), 
				ADR(TC.CF15), 
				SIZEOF(TimeChannels.TC15.OffTime), 
				ADR(SavedTimeChannels.TC15.OffTime), 
				ADR(SavedTC.CF15), 
				'UINT', concat(Text1, '.TC15.OffTime'), (concat(Text2, '.CF15')));	
ExchangeData(	ADR(TimeChannels.TC16.OffTime), 
				ADR(TC.CF16), 
				SIZEOF(TimeChannels.TC16.OffTime), 
				ADR(SavedTimeChannels.TC16.OffTime), 
				ADR(SavedTC.CF16), 
				'UINT', concat(Text1, '.TC16.OffTime'), (concat(Text2, '.CF16')));	
ExchangeData(	ADR(TimeChannels.TC17.OffTime), 
				ADR(TC.CF17), 
				SIZEOF(TimeChannels.TC17.OffTime), 
				ADR(SavedTimeChannels.TC17.OffTime), 
				ADR(SavedTC.CF17), 
				'UINT', concat(Text1, '.TC17.OffTime'), (concat(Text2, '.CF17')));	

ExchangeData(	ADR(TimeChannels.TC21.OffTime), 
				ADR(TC.CF21), 
				SIZEOF(TimeChannels.TC21.OffTime), 
				ADR(SavedTimeChannels.TC21.OffTime), 
				ADR(SavedTC.CF21), 
				'UINT', concat(Text1, '.TC21.OffTime'), (concat(Text2, '.CF21')));	
ExchangeData(	ADR(TimeChannels.TC22.OffTime), 
				ADR(TC.CF22), 
				SIZEOF(TimeChannels.TC22.OffTime), 
				ADR(SavedTimeChannels.TC22.OffTime), 
				ADR(SavedTC.CF22), 
				'UINT', concat(Text1, '.TC22.OffTime'), (concat(Text2, '.CF22')));	
ExchangeData(	ADR(TimeChannels.TC23.OffTime), 
				ADR(TC.CF23), 
				SIZEOF(TimeChannels.TC23.OffTime), 
				ADR(SavedTimeChannels.TC23.OffTime), 
				ADR(SavedTC.CF23), 
				'UINT', concat(Text1, '.TC23.OffTime'), (concat(Text2, '.CF23')));	
ExchangeData(	ADR(TimeChannels.TC24.OffTime), 
				ADR(TC.CF24), 
				SIZEOF(TimeChannels.TC24.OffTime), 
				ADR(SavedTimeChannels.TC24.OffTime), 
				ADR(SavedTC.CF24), 
				'UINT', concat(Text1, '.TC24.OffTime'), (concat(Text2, '.CF24')));	
ExchangeData(	ADR(TimeChannels.TC25.OffTime), 
				ADR(TC.CF25), 
				SIZEOF(TimeChannels.TC25.OffTime), 
				ADR(SavedTimeChannels.TC25.OffTime), 
				ADR(SavedTC.CF25), 
				'UINT', concat(Text1, '.TC25.OffTime'), (concat(Text2, '.CF25')));	
ExchangeData(	ADR(TimeChannels.TC26.OffTime), 
				ADR(TC.CF26), 
				SIZEOF(TimeChannels.TC26.OffTime), 
				ADR(SavedTimeChannels.TC26.OffTime), 
				ADR(SavedTC.CF26), 
				'UINT', concat(Text1, '.TC26.OffTime'), (concat(Text2, '.CF26')));	
ExchangeData(	ADR(TimeChannels.TC27.OffTime), 
				ADR(TC.CF27), 
				SIZEOF(TimeChannels.TC27.OffTime), 
				ADR(SavedTimeChannels.TC27.OffTime), 
				ADR(SavedTC.CF27), 
				'UINT', concat(Text1, '.TC27.OffTime'), (concat(Text2, '.CF27')));	

ExchangeData(	ADR(TimeChannels.TC01.OnTime), 
				ADR(TC.CT1), 
				SIZEOF(TimeChannels.TC01.OnTime), 
				ADR(SavedTimeChannels.TC01.OnTime), 
				ADR(SavedTC.CT1), 
				'UINT', concat(Text1, '.TC01.OnTime'), (concat(Text2, '.CT1')));	
ExchangeData(	ADR(TimeChannels.TC02.OnTime), 
				ADR(TC.CT2), 
				SIZEOF(TimeChannels.TC02.OnTime), 
				ADR(SavedTimeChannels.TC02.OnTime), 
				ADR(SavedTC.CT2), 
				'UINT', concat(Text1, '.TC02.OnTime'), (concat(Text2, '.CT2')));	
ExchangeData(	ADR(TimeChannels.TC03.OnTime), 
				ADR(TC.CT3), 
				SIZEOF(TimeChannels.TC03.OnTime), 
				ADR(SavedTimeChannels.TC03.OnTime), 
				ADR(SavedTC.CT3), 
				'UINT', concat(Text1, '.TC03.OnTime'), (concat(Text2, '.CT3')));	
ExchangeData(	ADR(TimeChannels.TC04.OnTime), 
				ADR(TC.CT4), 
				SIZEOF(TimeChannels.TC04.OnTime), 
				ADR(SavedTimeChannels.TC04.OnTime), 
				ADR(SavedTC.CT4), 
				'UINT', concat(Text1, '.TC04.OnTime'), (concat(Text2, '.CT4')));	
ExchangeData(	ADR(TimeChannels.TC05.OnTime), 
				ADR(TC.CT5), 
				SIZEOF(TimeChannels.TC05.OnTime), 
				ADR(SavedTimeChannels.TC05.OnTime), 
				ADR(SavedTC.CT5), 
				'UINT', concat(Text1, '.TC05.OnTime'), (concat(Text2, '.CT5')));	
ExchangeData(	ADR(TimeChannels.TC06.OnTime), 
				ADR(TC.CT6), 
				SIZEOF(TimeChannels.TC06.OnTime), 
				ADR(SavedTimeChannels.TC06.OnTime), 
				ADR(SavedTC.CT6), 
				'UINT', concat(Text1, '.TC06.OnTime'), (concat(Text2, '.CT6')));	
ExchangeData(	ADR(TimeChannels.TC07.OnTime), 
				ADR(TC.CT7), 
				SIZEOF(TimeChannels.TC07.OnTime), 
				ADR(SavedTimeChannels.TC07.OnTime), 
				ADR(SavedTC.CT7), 
				'UINT', concat(Text1, '.TC07.OnTime'), (concat(Text2, '.CT7')));	

ExchangeData(	ADR(TimeChannels.TC11.OnTime), 
				ADR(TC.CT11), 
				SIZEOF(TimeChannels.TC11.OnTime), 
				ADR(SavedTimeChannels.TC11.OnTime), 
				ADR(SavedTC.CT11), 
				'UINT', concat(Text1, '.TC11.OnTime'), (concat(Text2, '.CT11')));	
ExchangeData(	ADR(TimeChannels.TC12.OnTime), 
				ADR(TC.CT12), 
				SIZEOF(TimeChannels.TC12.OnTime), 
				ADR(SavedTimeChannels.TC12.OnTime), 
				ADR(SavedTC.CT12), 
				'UINT', concat(Text1, '.TC12.OnTime'), (concat(Text2, '.CT12')));	
ExchangeData(	ADR(TimeChannels.TC13.OnTime), 
				ADR(TC.CT13), 
				SIZEOF(TimeChannels.TC13.OnTime), 
				ADR(SavedTimeChannels.TC13.OnTime), 
				ADR(SavedTC.CT13), 
				'UINT', concat(Text1, '.TC13.OnTime'), (concat(Text2, '.CT13')));	
ExchangeData(	ADR(TimeChannels.TC14.OnTime), 
				ADR(TC.CT14), 
				SIZEOF(TimeChannels.TC14.OnTime), 
				ADR(SavedTimeChannels.TC14.OnTime), 
				ADR(SavedTC.CT14), 
				'UINT', concat(Text1, '.TC14.OnTime'), (concat(Text2, '.CT14')));	
ExchangeData(	ADR(TimeChannels.TC15.OnTime), 
				ADR(TC.CT15), 
				SIZEOF(TimeChannels.TC15.OnTime), 
				ADR(SavedTimeChannels.TC15.OnTime), 
				ADR(SavedTC.CT15), 
				'UINT', concat(Text1, '.TC15.OnTime'), (concat(Text2, '.CT15')));	
ExchangeData(	ADR(TimeChannels.TC16.OnTime), 
				ADR(TC.CT16), 
				SIZEOF(TimeChannels.TC16.OnTime), 
				ADR(SavedTimeChannels.TC16.OnTime), 
				ADR(SavedTC.CT16), 
				'UINT', concat(Text1, '.TC16.OnTime'), (concat(Text2, '.CT16')));	
ExchangeData(	ADR(TimeChannels.TC17.OnTime), 
				ADR(TC.CT17), 
				SIZEOF(TimeChannels.TC17.OnTime), 
				ADR(SavedTimeChannels.TC17.OnTime), 
				ADR(SavedTC.CT17), 
				'UINT', concat(Text1, '.TC17.OnTime'), (concat(Text2, '.CT17')));	

ExchangeData(	ADR(TimeChannels.TC21.OnTime), 
				ADR(TC.CT21), 
				SIZEOF(TimeChannels.TC21.OnTime), 
				ADR(SavedTimeChannels.TC21.OnTime), 
				ADR(SavedTC.CT21), 
				'UINT', concat(Text1, '.TC21.OnTime'), (concat(Text2, '.CT21')));	
ExchangeData(	ADR(TimeChannels.TC22.OnTime), 
				ADR(TC.CT22), 
				SIZEOF(TimeChannels.TC22.OnTime), 
				ADR(SavedTimeChannels.TC22.OnTime), 
				ADR(SavedTC.CT22), 
				'UINT', concat(Text1, '.TC22.OnTime'), (concat(Text2, '.CT22')));	
ExchangeData(	ADR(TimeChannels.TC23.OnTime), 
				ADR(TC.CT23), 
				SIZEOF(TimeChannels.TC23.OnTime), 
				ADR(SavedTimeChannels.TC23.OnTime), 
				ADR(SavedTC.CT23), 
				'UINT', concat(Text1, '.TC23.OnTime'), (concat(Text2, '.CT23')));	
ExchangeData(	ADR(TimeChannels.TC24.OnTime), 
				ADR(TC.CT24), 
				SIZEOF(TimeChannels.TC24.OnTime), 
				ADR(SavedTimeChannels.TC24.OnTime), 
				ADR(SavedTC.CT24), 
				'UINT', concat(Text1, '.TC24.OnTime'), (concat(Text2, '.CT24')));	
ExchangeData(	ADR(TimeChannels.TC25.OnTime), 
				ADR(TC.CT25), 
				SIZEOF(TimeChannels.TC25.OnTime), 
				ADR(SavedTimeChannels.TC25.OnTime), 
				ADR(SavedTC.CT25), 
				'UINT', concat(Text1, '.TC25.OnTime'), (concat(Text2, '.CT25')));	
ExchangeData(	ADR(TimeChannels.TC26.OnTime), 
				ADR(TC.CT26), 
				SIZEOF(TimeChannels.TC26.OnTime), 
				ADR(SavedTimeChannels.TC26.OnTime), 
				ADR(SavedTC.CT26), 
				'UINT', concat(Text1, '.TC26.OnTime'), (concat(Text2, '.CT26')));	
ExchangeData(	ADR(TimeChannels.TC27.OnTime), 
				ADR(TC.CT27), 
				SIZEOF(TimeChannels.TC27.OnTime), 
				ADR(SavedTimeChannels.TC27.OnTime), 
				ADR(SavedTC.CT27), 
				'UINT', concat(Text1, '.TC27.OnTime'), (concat(Text2, '.CT27')));	

]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>