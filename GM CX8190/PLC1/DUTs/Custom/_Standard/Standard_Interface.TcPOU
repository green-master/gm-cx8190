<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.6">
  <POU Name="Standard_Interface" Id="{40c37495-96b9-4b64-a0d7-3e6c97a16c6a}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK Standard_Interface
VAR_INPUT
	AIn: REFERENCE TO AnalogInputs;
	EN: BOOL;
END_VAR
VAR_OUTPUT
	ENO: BOOL;
	NightCooling: BOOL;
END_VAR
VAR
	InitDone: BOOL;
	PreEN: bool;
	Parameters: REFERENCE TO GreenMasterBaseParameters;
	GM_XXL: REFERENCE TO GreenMasterXXL_FB;
	T_BT1, T_BT2, T_BT3, H_BT1, F_BT2: TemperatureInput;
	bTemp: BOOL;
	lrTemp: LREAL;
	tTemp: TIME;
	ltTemp: LTIME;
	modeTemp: FanControlTypes;
	FirstTime: BOOL;
	TimeChannelActive: BOOL;
	TimeChannelEnabled: BOOL;
	n: UINT;
	TimeChannel1: TimeChannel1CH;
	TimeChannel2: TimeChannel1CH;
	TimeChannel3: TimeChannel1CH;
	TimeChannelFallback: TimeChannel1CH;
	WatchdogTOF: TOF;
	LastWatchDog: INT;
	SetPointAdjustment: SetPointAdjustment;
	CurrentPV: LREAL;
	
	SavedDisabledStates: AlarmSignals;
	AlarmSignalsTrueExceptFirePanel: AlarmSignals;
	StatusP: POINTER TO ARRAY [0..SIZEOF(AlarmSignals) - 1] OF BOOL;
	AlarmCount: UINT := SIZEOF(AlarmSignals);
	ResetAlarmTON: TON;
	SavedParameters: GreenMasterBaseParameters;
	SavedInterface: GreenMasterSettings;
	TestExchange: BOOL := FALSE;
	UpdateTON: TON;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF NOT InitDone THEN
	Parameters REF= Main.GreenMaster.GetParameters();
	GM_XXL REF= Main.GreenMaster;
	SavedParameters := Parameters;
	SavedInterface := ADS_Standard.Tags.Settings;
	InitDone := TRUE;
END_IF;

TimeChannelEnabled := FALSE;
TimeChannelActive := FALSE;

TimeChannelEnabled := TimeChannelEnabled OR ADS_Standard.Tags.Schedule1.EN;
TimeChannelActive := TimeChannelActive OR ADS_Standard.Tags.Schedule1.Q;
TimeChannel1(Settings := ADS_Standard.Tags.Schedule1);

TimeChannelEnabled := TimeChannelEnabled OR ADS_Standard.Tags.Schedule2.EN;
TimeChannelActive := TimeChannelActive OR ADS_Standard.Tags.Schedule2.Q;
TimeChannel2(Settings := ADS_Standard.Tags.Schedule2);

TimeChannelEnabled := TimeChannelEnabled OR ADS_Standard.Tags.Schedule3.EN;
TimeChannelActive := TimeChannelActive OR ADS_Standard.Tags.Schedule3.Q;
TimeChannel3(Settings := ADS_Standard.Tags.Schedule3);

TimeChannelFallback(Settings := ADS_Standard.Tags.ScheduleFallback);
WatchdogTOF(IN := (NOT ADS_Standard.Tags.Settings.WatchdogEnabled) OR (ADS_Standard.Tags.Settings.Watchdog <> LastWatchDog), PT := T#5M);

IF WatchdogTOF.Q THEN
	ENO := EN AND (ADS_Standard.Tags.Settings.RemoteStart > 0) AND TimeChannelEnabled AND TimeChannelActive;
ELSE
	ENO := EN AND (ADS_Standard.Tags.Settings.RemoteStart > 0) AND TimeChannelFallback.Q;
END_IF

IF EN THEN
	
	Globals.IO.DOut.DO16 := ADS_Standard.Tags.Status.C_GP1_CMD;
	
	NightCooling := ADS_Standard.Tags.Settings.NightCooling_V;
	UpdateTON(IN := TRUE, PT := T#1S);
	// --------------------------------------------------------------------------------
	// Transfer from Standard tags to settings
	IF Parameters.System.Operation.RemoteEN AND UpdateTON.Q THEN
		UpdateTON(IN := False);
		Parameters.Alarm.Control.ResetAlarms := ADS_Standard.Tags.Settings.ResetAlarms;
		ResetAlarmTON(IN := ADS_Standard.Tags.Settings.ResetAlarms, PT := T#3S);
		IF ResetAlarmTON.Q THEN
			ADS_Standard.Tags.Settings.ResetAlarms := FALSE;
		END_IF
		Parameters.Regulation.Control.EN := TRUE;//ADS_Standard.Tags.Settings.VentilationEN;
		Parameters.Regulation.Temperature.EN := TRUE;//ADS_Standard.Tags.Settings.TemperatureControlEN;
		IF ADS_Standard.Tags.Settings.TemperatureControlPV = 0 THEN
			Parameters.Regulation.Temperature.TemperatureControlSource := TemperatureControlSources.T_BT1;
		ELSIF ADS_Standard.Tags.Settings.TemperatureControlPV = 1 THEN
			Parameters.Regulation.Temperature.TemperatureControlSource := TemperatureControlSources.F_BT1;
		ELSE
			Parameters.Regulation.Temperature.TemperatureControlSource := TemperatureControlSources.T_BT1;
		END_IF
		
		IF TestExchange THEN
			ExchangeData(	ADR(Parameters.Regulation.Temperature.Control.SP), 
							ADR(ADS_Standard.Tags.Settings.Temperature_SP), 
							SIZEOF(Parameters.Regulation.Temperature.Control.SP), 
							ADR(SavedParameters.Regulation.Temperature.Control.SP), 
							ADR(SavedInterface.Temperature_SP), 
							'LREAL', sLiteral_TO_UTF8('Temp SP changed locally to $${Value} °C'), sLiteral_TO_UTF8('Temp SP changed via ADS to $${Value} °C'));	
			ExchangeData(	ADR(Parameters.Regulation.Temperature.SetPointAdjustment.Curve), 
							ADR(ADS_Standard.Tags.Settings.SetPointOffsetCurve), 
							SIZEOF(Parameters.Regulation.Temperature.SetPointAdjustment.Curve), 
							ADR(SavedParameters.Regulation.Temperature.SetPointAdjustment.Curve), 
							ADR(SavedInterface.SetPointOffsetCurve), 
							'SetPointOffsetCurve', sLiteral_TO_UTF8('Temp curve changed locally'), sLiteral_TO_UTF8('Temp curve changed via ADS'));	
		ELSE	
			Parameters.Regulation.Temperature.Control.SP := ADS_Standard.Tags.Settings.Temperature_SP;
			Parameters.Regulation.Temperature.SetPointAdjustment.Curve := ADS_Standard.Tags.Settings.SetPointOffsetCurve; 
		END_IF
		
		Parameters.Regulation.Temperature.Control.P := ADS_Standard.Tags.Settings.TemperatureControl_P;
		Parameters.Regulation.Temperature.Control.I := ADS_Standard.Tags.Settings.TemperatureControl_I;
		Parameters.Regulation.Temperature.Control.D := ADS_Standard.Tags.Settings.TemperatureControl_D;
		//Parameters.System.Operation.StartupHeatRecoveryTime := TIME_TO_LTIME(ADS_Standard.Tags.Settings.StartupHeatRecoveryTime);
		//Parameters.System.Operation.PostFireVentilationTime := TIME_TO_LTIME(ADS_Standard.Tags.Settings.PostFireVentilationTime);
		Parameters.Regulation.SupplyAir.ControlMode := ADS_Standard.Tags.Settings.SupplyFanControlMode;
		Parameters.Regulation.SupplyAir.Control.SP := ADS_Standard.Tags.Settings.SupplyFan_SP;
		Parameters.Regulation.SupplyAir.Control.SP_HighSpeed := ADS_Standard.Tags.Settings.SupplyFanHighSpeed_SP;
		Parameters.Regulation.SupplyAir.Control.P := ADS_Standard.Tags.Settings.SupplyFanControl_P;
		Parameters.Regulation.SupplyAir.Control.I := ADS_Standard.Tags.Settings.SupplyFanControl_I;
		Parameters.Regulation.SupplyAir.SetPointAdjustment.Curve :=ADS_Standard.Tags.Settings.SupplyFanOffsetCurve;
		Parameters.Regulation.ExtractAir.ControlMode := ADS_Standard.Tags.Settings.ExtractFanControlMode;
		Parameters.Regulation.ExtractAir.Control.SP := ADS_Standard.Tags.Settings.ExtractFan_SP;
		Parameters.Regulation.SupplyAir.Control.SP_HighSpeed := ADS_Standard.Tags.Settings.ExtractFanHighSpeed_SP;
		Parameters.Regulation.ExtractAir.Control.P := ADS_Standard.Tags.Settings.ExtractFanControl_P;
		Parameters.Regulation.ExtractAir.Control.I := ADS_Standard.Tags.Settings.ExtractFanControl_I;
		Parameters.Regulation.ExtractAir.SetPointAdjustment.Curve :=ADS_Standard.Tags.Settings.ExtractFanOffsetCurve;
		
		Main.GreenMasterAO.SetOverrideT_GQ1(Parameters := Parameters, Override := ADS_Standard.Tags.Settings.T_GQ1_M, OverrideValue := ADS_Standard.Tags.Settings.T_GQ1_OPM / 100.0); 
		Main.GreenMasterAO.SetOverrideF_GQ1(Parameters := Parameters, Override := ADS_Standard.Tags.Settings.F_GQ1_M, OverrideValue := ADS_Standard.Tags.Settings.F_GQ1_OPM / 100.0);
		Main.GreenMasterAO.SetOverrideH_QN1(Parameters := Parameters, Override := ADS_Standard.Tags.Settings.H_QN1_M, OverrideValue := ADS_Standard.Tags.Settings.H_QN1_OPM / 100.0);
		Main.GreenMasterAO.SetOverrideF_QN1(Parameters := Parameters, Override := ADS_Standard.Tags.Settings.TX1_M, OverrideValue := ADS_Standard.Tags.Settings.TX1_OPM / 100.0);
		Main.GreenMasterAO.SetOverrideC_QN1(Parameters := Parameters, Override := ADS_Standard.Tags.Settings.C_QN1_M, OverrideValue := ADS_Standard.Tags.Settings.C_QN1_OPM / 100.0);
		
	END_IF
	
	// Status transfers
	ADS_Standard.Tags.Status.ENO := Parameters.System.Operation.ENO;
	ADS_Standard.Tags.Status.Auto := Parameters.IO.DIn.Auto;
	ADS_Standard.Tags.Status.Hand := Parameters.IO.DIn.Hand;
	ADS_Standard.Tags.Status.TC_V := TimeChannelActive;
	ADS_Standard.Tags.Status.F_BR1_AL := (GM_XXL.DI.FireExtractAlarm OR GM_XXL.DI.ServiceAlarmCentralAndSmokeExhaustAir);
	ADS_Standard.Tags.Status.T_BR1_AL := GM_XXL.DI.FireSupplyAlarm;
	ADS_Standard.Tags.Status.F_BR1_FAULT := Parameters.Alarm.Active.B.SmokeDetectorService;
	ADS_Standard.Tags.Status.T_BR1_FAULT := Parameters.Alarm.Active.B.SmokeDetectorService;
	
	ADS_Standard.Tags.Status.F_BP1_AL := Parameters.Alarm.Active.B.ExtractAirDeviation;
	ADS_Standard.Tags.Status.T_BP1_AL := Parameters.Alarm.Active.B.SupplyAirDeviation;
	ADS_Standard.Tags.Status.T_BT1_AL := Parameters.Alarm.Active.B.RegulationDeviation;
	
	ADS_Standard.Tags.Status.BT1_FAULT := Parameters.IO.AIn.BT1_Error;
	ADS_Standard.Tags.Status.BT2_FAULT := Parameters.IO.AIn.BT2_Error;
	ADS_Standard.Tags.Status.F_BF1_FAULT := Parameters.IO.AIn.F_BF1_Error;
	ADS_Standard.Tags.Status.F_BP1_FAULT := Parameters.IO.AIn.F_BP1_Error;
	ADS_Standard.Tags.Status.F_BP2_FAULT := Parameters.IO.AIn.F_BP2_Error;
	ADS_Standard.Tags.Status.F_BP3_FAULT := Parameters.IO.AIn.F_BP3_Error;
	ADS_Standard.Tags.Status.F_BT1_FAULT := Parameters.IO.AIn.F_BT1_Error;
	ADS_Standard.Tags.Status.F_BT2_FAULT := Parameters.IO.AIn.F_BT2_Error;
	ADS_Standard.Tags.Status.H_BT1_FAULT := Parameters.IO.AIn.H_BT1_Error;
	ADS_Standard.Tags.Status.T_BF1_FAULT := Parameters.IO.AIn.T_BF1_Error;
	ADS_Standard.Tags.Status.T_BP1_FAULT := Parameters.IO.AIn.T_BP1_Error;
	ADS_Standard.Tags.Status.T_BP2_FAULT := Parameters.IO.AIn.T_BP2_Error;
	ADS_Standard.Tags.Status.T_BT1_FAULT := Parameters.IO.AIn.T_BT1_Error;
	ADS_Standard.Tags.Status.T_BT2_FAULT := Parameters.IO.AIn.T_BT2_Error;
	ADS_Standard.Tags.Status.T_BT3_FAULT := Parameters.IO.AIn.T_BT3_Error;
	
	ADS_Standard.Tags.Status.Fuse_AL := GM_XXL.DI.FuseAlarm;
	ADS_Standard.Tags.Status.T_GQ1_AL := GM_XXL.DI.T_GQ1_Alarm;
	ADS_Standard.Tags.Status.F_GQ1_AL := GM_XXL.DI.F_GQ1_Alarm;
	ADS_Standard.Tags.Status.Fire_AL := GM_XXL.DI.FireSupplyAlarm;
	ADS_Standard.Tags.Status.H_GP1_V := GM_XXL.DI.H_GP1_Running;
	ADS_Standard.Tags.Status.H_GP1_AL := FALSE; //GM_XXL.DI.H_GP1_Alarm;
	ADS_Standard.Tags.Status.C_GP1_V := Globals.IO.DIn.DI22;
	ADS_Standard.Tags.Status.C_GP1_AL := Globals.IO.DIn.DI23;
	ADS_Standard.Tags.Status.T_BP2_HAL := Parameters.Alarm.Active.B.SupplyFilter;
	ADS_Standard.Tags.Status.F_BP2_HAL := Parameters.Alarm.Active.B.ExtractFilter;
	
	ADS_Standard.Tags.Status.H_GP1_CMD := Parameters.IO.DOut.H_GP1;
	ADS_Standard.Tags.Status.C_GP1_CMD := Parameters.IO.DOut.C_GP1;	// WHHAATT??? Parameters.System.Operation.EN;
	ADS_Standard.Tags.Status.F_QM1_CMD := Parameters.IO.DOut.F_QM1;
	ADS_Standard.Tags.Status.T_QM2_CMD := Parameters.IO.DOut.T_QM2;
	(*!!!!! BORT !!!! *)ADS_Standard.Tags.Status.T_QM3_CMD := Parameters.IO.DOut.T_QM2;
		
	ADS_Standard.Tags.Status.F_QM2_CMD := Parameters.IO.DOut.F_QM2;
	ADS_Standard.Tags.Status.F_QM2_V0 := Parameters.IO.DIn.F_QM2_Closed;
	ADS_Standard.Tags.Status.F_QM2_V1 := Parameters.IO.DIn.F_QM2_Open;
	
	ADS_Standard.Tags.Status.T_QM1_1_CMD := Parameters.IO.DOut.T_QM1_1;
	ADS_Standard.Tags.Status.T_QM1_2_CMD := Parameters.IO.DOut.T_QM1_2;
	ADS_Standard.Tags.Status.T_QM1_3_CMD := Parameters.IO.DOut.T_QM1_3;
	ADS_Standard.Tags.Status.T_QM1_4_CMD := Parameters.IO.DOut.T_QM1_4;
	ADS_Standard.Tags.Status.T_QM1_5_CMD := Parameters.IO.DOut.T_QM1_5;
	ADS_Standard.Tags.Status.T_QM1_6_CMD := Parameters.IO.DOut.T_QM1_6;

	ADS_Standard.Tags.Status.T_QM1_CMD := Parameters.IO.DOut.T_QM2;

	ADS_Standard.Tags.Status.Temperature_CSP := LREAL_TO_REAL(Parameters.Regulation.Temperature.Control.CSP);
	ADS_Standard.Tags.Status.T_BP1_CSP := LREAL_TO_REAL(Parameters.Regulation.SupplyAir.Control.CSP);
	ADS_Standard.Tags.Status.F_BP1_CSP := LREAL_TO_REAL(Parameters.Regulation.ExtractAir.Control.CSP);
	ADS_Standard.Tags.Status.F_BT1_PV := LREAL_TO_REAL(GM_XXL.AI.F_BT1);
	ADS_Standard.Tags.Status.T_BT2_PV := LREAL_TO_REAL(GM_XXL.AI.T_BT2);
	ADS_Standard.Tags.Status.T_BT3_PV := LREAL_TO_REAL(GM_XXL.AI.T_BT3);
	ADS_Standard.Tags.Status.H_BT1_PV := LREAL_TO_REAL(GM_XXL.AI.H_BT1);
	ADS_Standard.Tags.Status.T_BT1_PV := LREAL_TO_REAL(GM_XXL.AI.T_BT1);
	ADS_Standard.Tags.Status.F_BT2_PV := LREAL_TO_REAL(GM_XXL.AI.F_BT2);
	
(*	Chalmers, egentligen batteriåtervinning...	
	GT21(ProcessValue := AIn.AI09, ProcessError := AIn.AI09_Error);
	ADS_Standard.Tags.Status.GT21_V := LREAL_TO_REAL(GT21.Value);
	GT44(ProcessValue := AIn.AI10, ProcessError := AIn.AI10_Error);
	ADS_Standard.Tags.Status.GT44_V := LREAL_TO_REAL(GT44.Value);
	GT45(ProcessValue := AIn.AI11, ProcessError := AIn.AI11_Error);
	ADS_Standard.Tags.Status.GT45_V := LREAL_TO_REAL(GT45.Value);
	GT46(ProcessValue := AIn.AI12, ProcessError := AIn.AI12_Error);
	ADS_Standard.Tags.Status.GT46_V := LREAL_TO_REAL(GT46.Value);
	GT41(ProcessValue := AIn.AI13, ProcessError := AIn.AI13_Error);
	ADS_Standard.Tags.Status.GT41_V := LREAL_TO_REAL(GT41.Value);

*)	
	IF NOT GM_XXL.AI2.T_BF1_Error THEN
		ADS_Standard.Tags.Status.T_BF1_PV := LREAL_TO_REAL(GM_XXL.AI2.T_BF1);
	ELSE	
		ADS_Standard.Tags.Status.T_BF1_PV := 0;
	END_IF
	IF NOT GM_XXL.AI2.F_BF1_Error THEN
		ADS_Standard.Tags.Status.F_BF1_PV := LREAL_TO_REAL(GM_XXL.AI2.F_BF1);
	ELSE	
		ADS_Standard.Tags.Status.F_BF1_PV := 0;
	END_IF
	ADS_Standard.Tags.Status.T_BP1_PV := LREAL_TO_REAL(GM_XXL.AI2.T_BP1);
	ADS_Standard.Tags.Status.F_BP1_PV := LREAL_TO_REAL(GM_XXL.AI2.F_BP1);
	ADS_Standard.Tags.Status.T_BP2_PV := LREAL_TO_REAL(GM_XXL.AI2.T_BP2);
	ADS_Standard.Tags.Status.F_BP2_PV := LREAL_TO_REAL(GM_XXL.AI2.F_BP2);
	ADS_Standard.Tags.Status.F_BP3_PV := LREAL_TO_REAL(GM_XXL.AI2.F_BP3);
	
	ADS_Standard.Tags.Status.TX1_OP := LREAL_TO_REAL(Parameters.IO.AOut.F_QN1 * 100);
	ADS_Standard.Tags.Status.H_QN1_OP := LREAL_TO_REAL(Parameters.IO.AOut.H_QN1 * 100);
	ADS_Standard.Tags.Status.T_GQ1_OP := LREAL_TO_REAL(Parameters.IO.AOut.T_GQ1 * 100);
	ADS_Standard.Tags.Status.F_GQ1_OP := LREAL_TO_REAL(Parameters.IO.AOut.F_GQ1 * 100);
	ADS_Standard.Tags.Status.T_GQ1_V := Parameters.IO.AOut.T_GQ1 > 0.02;
	ADS_Standard.Tags.Status.F_GQ1_V := Parameters.IO.AOut.F_GQ1 > 0.02;
	
	ADS_Standard.Tags.Status.TX1_VG_PV := LREAL_TO_REAL(Parameters.Regulation.Temperature.Efficiency * 100);
	ADS_Standard.Tags.Status.TX1_VG_LAL := Parameters.Alarm.Active.B.HeatExchangerEfficiency;

	PreEN := TRUE;
	
	ModbusSettings();
ELSE
	IF PreEN THEN
		Globals.IO.DOut.DO16 := FALSE;
	END_IF
	PreEN := FALSE;
END_IF
]]></ST>
    </Implementation>
    <Method Name="ExchangeData" Id="{46e1af3f-f028-4584-9b21-580cb58e0bb4}">
      <Declaration><![CDATA[METHOD ExchangeData : BOOL
VAR_INPUT
	PData1: POINTER TO BYTE;
	PData2: POINTER TO BYTE;
	Size: UDINT;
	PSavedData1: POINTER TO BYTE;
	PSavedData2: POINTER TO BYTE;
	VarType: STRING;
	{attribute 'TcEncoding':='UTF-8'}
	LogText1: STRING := '';
	{attribute 'TcEncoding':='UTF-8'}
	LogText2: STRING := '';
END_VAR
VAR
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF MemCmp(PData1, PSavedData1, Size) <> 0 THEN
	MemCpy(PData2, PData1, Size);
	MemCpy(PSavedData2, PData1, Size);
	MemCpy(PSavedData1, PData1, Size);
	IF LogText1 <> '' THEN
		Main.EventLog.LogEventJSON(EventTypes.Information, LogText1, VarType, Size, PData1);	
	END_IF
END_IF
IF MemCmp(PData2, PSavedData2, Size) <> 0 THEN
	MemCpy(PData1, PData2, Size);
	MemCpy(PSavedData1, PData2, Size);
	MemCpy(PSavedData2, PData2, Size);
	IF LogText2 <> '' THEN
		Main.EventLog.LogEventJSON(EventTypes.Information, LogText2, VarType, Size, PData2);	
	END_IF
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="ModbusSettings" Id="{65316f0c-b296-4acc-9143-2ee0375ea553}">
      <Declaration><![CDATA[METHOD ModbusSettings : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[GVL_MB.mb_Output_Registers[0] := BOOL_TO_WORD(ADS_Standard.Tags.Status.TC_V);]]></ST>
      </Implementation>
    </Method>
    <Action Name="ModbusStatus" Id="{0977aaf0-06a9-4503-8531-2e133e4315a5}">
      <Implementation>
        <ST><![CDATA[GVL_MB.mb_Input_Registers[0] := REAL_TO_WORD(ADS_Standard.Tags.Status.Temperature_CSP);

GVL_MB.mb_Input_Registers[100] := REAL_TO_WORD(ADS_Standard.Tags.Status.BT1_PV*10.0);
GVL_MB.mb_Input_Registers[101] := REAL_TO_WORD(ADS_Standard.Tags.Status.T_BT2_PV*10.0);
GVL_MB.mb_Input_Registers[102] := REAL_TO_WORD(ADS_Standard.Tags.Status.T_BT3_PV*10.0);
GVL_MB.mb_Input_Registers[103] := REAL_TO_WORD(ADS_Standard.Tags.Status.H_BT1_PV*10.0);
GVL_MB.mb_Input_Registers[104] := REAL_TO_WORD(ADS_Standard.Tags.Status.T_BT1_PV*10.0);
GVL_MB.mb_Input_Registers[105] := REAL_TO_WORD(ADS_Standard.Tags.Status.F_BT1_PV*10.0);
GVL_MB.mb_Input_Registers[106] := REAL_TO_WORD(ADS_Standard.Tags.Status.F_BT2_PV*10.0);

//GVL_MB.mb_Input_Registers[200] := REAL_TO_INT(ADS_Standard.Tags.Status.T_BP *10.0);

]]></ST>
      </Implementation>
    </Action>
    <LineIds Name="Standard_Interface">
      <LineId Id="2100" Count="2" />
      <LineId Id="2306" Count="1" />
      <LineId Id="2103" Count="50" />
      <LineId Id="2155" Count="2" />
      <LineId Id="2308" Count="10" />
      <LineId Id="2158" Count="1" />
      <LineId Id="2319" Count="0" />
      <LineId Id="2160" Count="145" />
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="Standard_Interface.ExchangeData">
      <LineId Id="117" Count="3" />
      <LineId Id="130" Count="0" />
      <LineId Id="133" Count="0" />
      <LineId Id="132" Count="0" />
      <LineId Id="121" Count="4" />
      <LineId Id="134" Count="2" />
      <LineId Id="126" Count="0" />
      <LineId Id="15" Count="0" />
    </LineIds>
    <LineIds Name="Standard_Interface.ModbusSettings">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="Standard_Interface.ModbusStatus">
      <LineId Id="1" Count="0" />
      <LineId Id="4" Count="0" />
      <LineId Id="3" Count="0" />
      <LineId Id="5" Count="5" />
      <LineId Id="12" Count="1" />
      <LineId Id="11" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>