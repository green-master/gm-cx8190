<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.6">
  <POU Name="RegulationParametersFB" Id="{35458062-23b8-41fa-a7d8-32b0bd66ddbe}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK RegulationParametersFB
VAR_IN_OUT
	Parameters: GreenMasterBaseParameters;
	ParametersFB: GreenMasterBaseParametersFB;
	Regulation: RegulationParameters;
END_VAR
VAR_INPUT
END_VAR
VAR_OUTPUT
	SupplyAir: AirParametersFB;
	ExtractAir: AirParametersFB;
	Temperature: TemperatureControlParametersFB;
END_VAR
VAR
	CurrentMaxFlow: LREAL;
	NightCoolingHysteresis: Hysteresis;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[SupplyAir(Parameters := Parameters, ParametersFB := ParametersFB, AirParameters := Regulation.SupplyAir);
ExtractAir(Parameters := Parameters, ParametersFB := ParametersFB, AirParameters := Regulation.ExtractAir);
Temperature(Parameters := Parameters, ParametersFB := ParametersFB, Temperature := Parameters.Regulation.Temperature);

IF __ISVALIDREF(ParametersFB.GetGreenMaster()) THEN
	Regulation.Temperature.Control.PV := ParametersFB.GetGreenMaster().GetCurrentPV();
	Regulation.SupplyAir.Control.PV := ParametersFB.GetGreenMaster().GetCurrentSupplyAirPV();
	Regulation.ExtractAir.Control.PV := ParametersFB.GetGreenMaster().GetCurrentExtractAirPV();
END_IF

CASE Regulation.TemperatureCompensationSource OF
	TemperatureCompensationSources.Auto:
		Regulation.CompensationTemperature := Parameters.IO.AIn.BT1;
		IF (NOT Parameters.IO.AIn.BT1_EN) OR Parameters.IO.AIn.BT1_Error THEN
			Regulation.CompensationTemperature := Parameters.IO.AIn.T_BT2;
			Regulation.CurrentTemperatureCompensationSource := TemperatureCompensationSources.T_BT2;
		ELSE
			Regulation.CurrentTemperatureCompensationSource := TemperatureCompensationSources.BT1;			
		END_IF;
	TemperatureCompensationSources.BT1:
		Regulation.CurrentTemperatureCompensationSource := TemperatureCompensationSources.BT1;
		Regulation.CompensationTemperature := Parameters.IO.AIn.BT1;
	TemperatureCompensationSources.T_BT2:
		Regulation.CurrentTemperatureCompensationSource := TemperatureCompensationSources.T_BT2;
		Regulation.CompensationTemperature := Parameters.IO.AIn.T_BT2;
END_CASE
Regulation.SupplyAir.Flow := Parameters.IO.AIn.T_BF1;
Regulation.ExtractAir.Flow := Parameters.IO.AIn.F_BF1;
Regulation.SupplyAir.Power := Main.GreenMaster.AI2.T_CurrentPower;
Regulation.ExtractAir.Power := Main.GreenMaster.AI2.F_CurrentPower;
Regulation.SupplyAir.Speed := Main.GreenMaster.AI2.T_CurrentSpeed;
Regulation.ExtractAir.Speed := Main.GreenMaster.AI2.F_CurrentSpeed;
Regulation.SupplyAir.PressureRise := Parameters.IO.AIn.T_BF1;
Regulation.ExtractAir.PressureRise := Parameters.IO.AIn.F_BF1;
CurrentMaxFlow := MAX(Regulation.ExtractAir.Flow, Regulation.SupplyAir.Flow);
IF CurrentMaxFlow <> 0 THEN
	Regulation.SystemSpecificFanPower := (Regulation.ExtractAir.Power + Regulation.SupplyAir.Power) / CurrentMaxFlow;	
ELSE
	Regulation.SystemSpecificFanPower := 0;
END_IF
IF (Regulation.SupplyAir.PressureRise + Regulation.ExtractAir.PressureRise) <> 0 THEN
	Regulation.SystemEfficiency := (Regulation.SupplyAir.SpecificFanPower + Regulation.ExtractAir.SpecificFanPower) / ((Regulation.SupplyAir.PressureRise + Regulation.ExtractAir.PressureRise) / 1000);
ELSE
	Regulation.SystemEfficiency := 0;	
END_IF

IF Regulation.ApplyAbsoluteSetPointCurves <> Regulation.LastApplyAbsoluteSetPointCurves THEN
	Regulation.Temperature.SetPointAdjustment.Curve.Y1 := TO_REAL(Regulation.Temperature.Control.SP); 
	Regulation.Temperature.SetPointAdjustment.Curve.Y2 := TO_REAL(Regulation.Temperature.Control.SP); 
	Regulation.Temperature.SetPointAdjustment.Curve.Y3 := TO_REAL(Regulation.Temperature.Control.SP); 
	Regulation.Temperature.SetPointAdjustment.Curve.Y6 := TO_REAL(Regulation.Temperature.Control.SP); 
	Regulation.Temperature.SetPointAdjustment.Curve.Y7 := TO_REAL(Regulation.Temperature.Control.SP); 
	Regulation.Temperature.SetPointAdjustment.Curve.Y8 := TO_REAL(Regulation.Temperature.Control.SP); 
	Regulation.Temperature.SetPointAdjustment.Curve.Y9 := TO_REAL(Regulation.Temperature.Control.SP);
	Regulation.Temperature.Control.SP := 0;
	Regulation.SupplyAir.SetPointAdjustment.Curve.Y1 := TO_REAL(Regulation.SupplyAir.Control.SP);
	Regulation.SupplyAir.SetPointAdjustment.Curve.Y2 := TO_REAL(Regulation.SupplyAir.Control.SP);
	Regulation.SupplyAir.SetPointAdjustment.Curve.Y3 := TO_REAL(Regulation.SupplyAir.Control.SP);
	Regulation.SupplyAir.SetPointAdjustment.Curve.Y4 := TO_REAL(Regulation.SupplyAir.Control.SP);
	Regulation.SupplyAir.SetPointAdjustment.Curve.Y5 := TO_REAL(Regulation.SupplyAir.Control.SP);
	Regulation.SupplyAir.SetPointAdjustment.Curve.Y6 := TO_REAL(Regulation.SupplyAir.Control.SP);
	Regulation.SupplyAir.SetPointAdjustment.Curve.Y7 := TO_REAL(Regulation.SupplyAir.Control.SP);
	Regulation.SupplyAir.SetPointAdjustment.Curve.Y8 := TO_REAL(Regulation.SupplyAir.Control.SP);
	Regulation.SupplyAir.SetPointAdjustment.Curve.Y9 := TO_REAL(Regulation.SupplyAir.Control.SP);
	Regulation.SupplyAir.Control.SP := 0;
	Regulation.ExtractAir.SetPointAdjustment.Curve.Y1 := TO_REAL(Regulation.ExtractAir.Control.SP);
	Regulation.ExtractAir.SetPointAdjustment.Curve.Y2 := TO_REAL(Regulation.ExtractAir.Control.SP);
	Regulation.ExtractAir.SetPointAdjustment.Curve.Y3 := TO_REAL(Regulation.ExtractAir.Control.SP);
	Regulation.ExtractAir.SetPointAdjustment.Curve.Y4 := TO_REAL(Regulation.ExtractAir.Control.SP);
	Regulation.ExtractAir.SetPointAdjustment.Curve.Y5 := TO_REAL(Regulation.ExtractAir.Control.SP);
	Regulation.ExtractAir.SetPointAdjustment.Curve.Y6 := TO_REAL(Regulation.ExtractAir.Control.SP);
	Regulation.ExtractAir.SetPointAdjustment.Curve.Y7 := TO_REAL(Regulation.ExtractAir.Control.SP);
	Regulation.ExtractAir.SetPointAdjustment.Curve.Y8 := TO_REAL(Regulation.ExtractAir.Control.SP);
	Regulation.ExtractAir.SetPointAdjustment.Curve.Y9 := TO_REAL(Regulation.ExtractAir.Control.SP);
	Regulation.ExtractAir.Control.SP := 0;
	Regulation.LastApplyAbsoluteSetPointCurves := Regulation.ApplyAbsoluteSetPointCurves;
END_IF

NightCoolingHysteresis(Value := Parameters.IO.AIn.T_BT1, LimitValue := 14, Offset := 0.5);
Parameters.Regulation.NightCooling := 
	Parameters.Regulation.NightCoolingRequest AND 
	NightCoolingHysteresis.Above AND 
	(NOT Parameters.System.Operation.TimeChannels.Q);
]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>